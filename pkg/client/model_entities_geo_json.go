/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EntitiesGeoJSON type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntitiesGeoJSON{}

// EntitiesGeoJSON struct for EntitiesGeoJSON
type EntitiesGeoJSON struct {
	Bbox     []float32                `json:"bbox"`
	Features []EntitiesGeoJSONFeature `json:"features"`
	Metadata EntitiesGeoJSONMetadata  `json:"metadata"`
	Type     EntitiesGeoJSONType      `json:"type"`
}

type _EntitiesGeoJSON EntitiesGeoJSON

// NewEntitiesGeoJSON instantiates a new EntitiesGeoJSON object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitiesGeoJSON(bbox []float32, features []EntitiesGeoJSONFeature, metadata EntitiesGeoJSONMetadata, type_ EntitiesGeoJSONType) *EntitiesGeoJSON {
	this := EntitiesGeoJSON{}
	this.Bbox = bbox
	this.Features = features
	this.Metadata = metadata
	this.Type = type_
	return &this
}

// NewEntitiesGeoJSONWithDefaults instantiates a new EntitiesGeoJSON object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitiesGeoJSONWithDefaults() *EntitiesGeoJSON {
	this := EntitiesGeoJSON{}
	return &this
}

// GetBbox returns the Bbox field value
func (o *EntitiesGeoJSON) GetBbox() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.Bbox
}

// GetBboxOk returns a tuple with the Bbox field value
// and a boolean to check if the value has been set.
func (o *EntitiesGeoJSON) GetBboxOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bbox, true
}

// SetBbox sets field value
func (o *EntitiesGeoJSON) SetBbox(v []float32) {
	o.Bbox = v
}

// GetFeatures returns the Features field value
func (o *EntitiesGeoJSON) GetFeatures() []EntitiesGeoJSONFeature {
	if o == nil {
		var ret []EntitiesGeoJSONFeature
		return ret
	}

	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value
// and a boolean to check if the value has been set.
func (o *EntitiesGeoJSON) GetFeaturesOk() ([]EntitiesGeoJSONFeature, bool) {
	if o == nil {
		return nil, false
	}
	return o.Features, true
}

// SetFeatures sets field value
func (o *EntitiesGeoJSON) SetFeatures(v []EntitiesGeoJSONFeature) {
	o.Features = v
}

// GetMetadata returns the Metadata field value
func (o *EntitiesGeoJSON) GetMetadata() EntitiesGeoJSONMetadata {
	if o == nil {
		var ret EntitiesGeoJSONMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *EntitiesGeoJSON) GetMetadataOk() (*EntitiesGeoJSONMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *EntitiesGeoJSON) SetMetadata(v EntitiesGeoJSONMetadata) {
	o.Metadata = v
}

// GetType returns the Type field value
func (o *EntitiesGeoJSON) GetType() EntitiesGeoJSONType {
	if o == nil {
		var ret EntitiesGeoJSONType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EntitiesGeoJSON) GetTypeOk() (*EntitiesGeoJSONType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EntitiesGeoJSON) SetType(v EntitiesGeoJSONType) {
	o.Type = v
}

func (o EntitiesGeoJSON) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntitiesGeoJSON) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bbox"] = o.Bbox
	toSerialize["features"] = o.Features
	toSerialize["metadata"] = o.Metadata
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *EntitiesGeoJSON) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bbox",
		"features",
		"metadata",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntitiesGeoJSON := _EntitiesGeoJSON{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEntitiesGeoJSON)

	if err != nil {
		return err
	}

	*o = EntitiesGeoJSON(varEntitiesGeoJSON)

	return err
}

type NullableEntitiesGeoJSON struct {
	value *EntitiesGeoJSON
	isSet bool
}

func (v NullableEntitiesGeoJSON) Get() *EntitiesGeoJSON {
	return v.value
}

func (v *NullableEntitiesGeoJSON) Set(val *EntitiesGeoJSON) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesGeoJSON) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesGeoJSON) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesGeoJSON(val *EntitiesGeoJSON) *NullableEntitiesGeoJSON {
	return &NullableEntitiesGeoJSON{value: val, isSet: true}
}

func (v NullableEntitiesGeoJSON) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesGeoJSON) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
