/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TreeCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TreeCreate{}

// TreeCreate struct for TreeCreate
type TreeCreate struct {
	AdditionalInformation map[string]interface{} `json:"additional_information,omitempty"`
	Description           string                 `json:"description"`
	Latitude              float32                `json:"latitude"`
	Longitude             float32                `json:"longitude"`
	Number                string                 `json:"number"`
	PlantingYear          int32                  `json:"planting_year"`
	Provider              *string                `json:"provider,omitempty"`
	Readonly              bool                   `json:"readonly"`
	SensorId              *string                `json:"sensor_id,omitempty"`
	Species               string                 `json:"species"`
	TreeClusterId         *int32                 `json:"tree_cluster_id,omitempty"`
}

type _TreeCreate TreeCreate

// NewTreeCreate instantiates a new TreeCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTreeCreate(description string, latitude float32, longitude float32, number string, plantingYear int32, readonly bool, species string) *TreeCreate {
	this := TreeCreate{}
	this.Description = description
	this.Latitude = latitude
	this.Longitude = longitude
	this.Number = number
	this.PlantingYear = plantingYear
	this.Readonly = readonly
	this.Species = species
	return &this
}

// NewTreeCreateWithDefaults instantiates a new TreeCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTreeCreateWithDefaults() *TreeCreate {
	this := TreeCreate{}
	return &this
}

// GetAdditionalInformation returns the AdditionalInformation field value if set, zero value otherwise.
func (o *TreeCreate) GetAdditionalInformation() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalInformation) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalInformation
}

// GetAdditionalInformationOk returns a tuple with the AdditionalInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeCreate) GetAdditionalInformationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalInformation) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalInformation, true
}

// HasAdditionalInformation returns a boolean if a field has been set.
func (o *TreeCreate) HasAdditionalInformation() bool {
	if o != nil && !IsNil(o.AdditionalInformation) {
		return true
	}

	return false
}

// SetAdditionalInformation gets a reference to the given map[string]interface{} and assigns it to the AdditionalInformation field.
func (o *TreeCreate) SetAdditionalInformation(v map[string]interface{}) {
	o.AdditionalInformation = v
}

// GetDescription returns the Description field value
func (o *TreeCreate) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TreeCreate) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TreeCreate) SetDescription(v string) {
	o.Description = v
}

// GetLatitude returns the Latitude field value
func (o *TreeCreate) GetLatitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *TreeCreate) GetLatitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *TreeCreate) SetLatitude(v float32) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *TreeCreate) GetLongitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *TreeCreate) GetLongitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *TreeCreate) SetLongitude(v float32) {
	o.Longitude = v
}

// GetNumber returns the Number field value
func (o *TreeCreate) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *TreeCreate) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *TreeCreate) SetNumber(v string) {
	o.Number = v
}

// GetPlantingYear returns the PlantingYear field value
func (o *TreeCreate) GetPlantingYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlantingYear
}

// GetPlantingYearOk returns a tuple with the PlantingYear field value
// and a boolean to check if the value has been set.
func (o *TreeCreate) GetPlantingYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlantingYear, true
}

// SetPlantingYear sets field value
func (o *TreeCreate) SetPlantingYear(v int32) {
	o.PlantingYear = v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *TreeCreate) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeCreate) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *TreeCreate) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *TreeCreate) SetProvider(v string) {
	o.Provider = &v
}

// GetReadonly returns the Readonly field value
func (o *TreeCreate) GetReadonly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value
// and a boolean to check if the value has been set.
func (o *TreeCreate) GetReadonlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Readonly, true
}

// SetReadonly sets field value
func (o *TreeCreate) SetReadonly(v bool) {
	o.Readonly = v
}

// GetSensorId returns the SensorId field value if set, zero value otherwise.
func (o *TreeCreate) GetSensorId() string {
	if o == nil || IsNil(o.SensorId) {
		var ret string
		return ret
	}
	return *o.SensorId
}

// GetSensorIdOk returns a tuple with the SensorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeCreate) GetSensorIdOk() (*string, bool) {
	if o == nil || IsNil(o.SensorId) {
		return nil, false
	}
	return o.SensorId, true
}

// HasSensorId returns a boolean if a field has been set.
func (o *TreeCreate) HasSensorId() bool {
	if o != nil && !IsNil(o.SensorId) {
		return true
	}

	return false
}

// SetSensorId gets a reference to the given string and assigns it to the SensorId field.
func (o *TreeCreate) SetSensorId(v string) {
	o.SensorId = &v
}

// GetSpecies returns the Species field value
func (o *TreeCreate) GetSpecies() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Species
}

// GetSpeciesOk returns a tuple with the Species field value
// and a boolean to check if the value has been set.
func (o *TreeCreate) GetSpeciesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Species, true
}

// SetSpecies sets field value
func (o *TreeCreate) SetSpecies(v string) {
	o.Species = v
}

// GetTreeClusterId returns the TreeClusterId field value if set, zero value otherwise.
func (o *TreeCreate) GetTreeClusterId() int32 {
	if o == nil || IsNil(o.TreeClusterId) {
		var ret int32
		return ret
	}
	return *o.TreeClusterId
}

// GetTreeClusterIdOk returns a tuple with the TreeClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeCreate) GetTreeClusterIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TreeClusterId) {
		return nil, false
	}
	return o.TreeClusterId, true
}

// HasTreeClusterId returns a boolean if a field has been set.
func (o *TreeCreate) HasTreeClusterId() bool {
	if o != nil && !IsNil(o.TreeClusterId) {
		return true
	}

	return false
}

// SetTreeClusterId gets a reference to the given int32 and assigns it to the TreeClusterId field.
func (o *TreeCreate) SetTreeClusterId(v int32) {
	o.TreeClusterId = &v
}

func (o TreeCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TreeCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalInformation) {
		toSerialize["additional_information"] = o.AdditionalInformation
	}
	toSerialize["description"] = o.Description
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	toSerialize["number"] = o.Number
	toSerialize["planting_year"] = o.PlantingYear
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	toSerialize["readonly"] = o.Readonly
	if !IsNil(o.SensorId) {
		toSerialize["sensor_id"] = o.SensorId
	}
	toSerialize["species"] = o.Species
	if !IsNil(o.TreeClusterId) {
		toSerialize["tree_cluster_id"] = o.TreeClusterId
	}
	return toSerialize, nil
}

func (o *TreeCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"latitude",
		"longitude",
		"number",
		"planting_year",
		"readonly",
		"species",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTreeCreate := _TreeCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTreeCreate)

	if err != nil {
		return err
	}

	*o = TreeCreate(varTreeCreate)

	return err
}

type NullableTreeCreate struct {
	value *TreeCreate
	isSet bool
}

func (v NullableTreeCreate) Get() *TreeCreate {
	return v.value
}

func (v *NullableTreeCreate) Set(val *TreeCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableTreeCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableTreeCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTreeCreate(val *TreeCreate) *NullableTreeCreate {
	return &NullableTreeCreate{value: val, isSet: true}
}

func (v NullableTreeCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTreeCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
