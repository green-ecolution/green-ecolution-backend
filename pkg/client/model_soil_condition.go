/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// SoilCondition the model 'SoilCondition'
type SoilCondition string

// List of SoilCondition
const (
	TreeSoilConditionSchluffig SoilCondition = "schluffig"
	TreeSoilConditionSandig    SoilCondition = "sandig"
	TreeSoilConditionLehmig    SoilCondition = "lehmig"
	TreeSoilConditionTonig     SoilCondition = "tonig"
	TreeSoilConditionUnknown   SoilCondition = "unknown"
)

// All allowed values of SoilCondition enum
var AllowedSoilConditionEnumValues = []SoilCondition{
	"schluffig",
	"sandig",
	"lehmig",
	"tonig",
	"unknown",
}

func (v *SoilCondition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SoilCondition(value)
	for _, existing := range AllowedSoilConditionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SoilCondition", value)
}

// NewSoilConditionFromValue returns a pointer to a valid SoilCondition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSoilConditionFromValue(v string) (*SoilCondition, error) {
	ev := SoilCondition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SoilCondition: valid values are %v", v, AllowedSoilConditionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SoilCondition) IsValid() bool {
	for _, existing := range AllowedSoilConditionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SoilCondition value
func (v SoilCondition) Ptr() *SoilCondition {
	return &v
}

type NullableSoilCondition struct {
	value *SoilCondition
	isSet bool
}

func (v NullableSoilCondition) Get() *SoilCondition {
	return v.value
}

func (v *NullableSoilCondition) Set(val *SoilCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableSoilCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableSoilCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoilCondition(val *SoilCondition) *NullableSoilCondition {
	return &NullableSoilCondition{value: val, isSet: true}
}

func (v NullableSoilCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoilCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
