/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EntitiesUserStatus the model 'EntitiesUserStatus'
type EntitiesUserStatus string

// List of entities.UserStatus
const (
	UserStatusAvailable EntitiesUserStatus = "available"
	UserStatusAbsent    EntitiesUserStatus = "absent"
	UserStatusUnknown   EntitiesUserStatus = "unknown"
)

// All allowed values of EntitiesUserStatus enum
var AllowedEntitiesUserStatusEnumValues = []EntitiesUserStatus{
	"available",
	"absent",
	"unknown",
}

func (v *EntitiesUserStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitiesUserStatus(value)
	for _, existing := range AllowedEntitiesUserStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitiesUserStatus", value)
}

// NewEntitiesUserStatusFromValue returns a pointer to a valid EntitiesUserStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitiesUserStatusFromValue(v string) (*EntitiesUserStatus, error) {
	ev := EntitiesUserStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitiesUserStatus: valid values are %v", v, AllowedEntitiesUserStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitiesUserStatus) IsValid() bool {
	for _, existing := range AllowedEntitiesUserStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to entities.UserStatus value
func (v EntitiesUserStatus) Ptr() *EntitiesUserStatus {
	return &v
}

type NullableEntitiesUserStatus struct {
	value *EntitiesUserStatus
	isSet bool
}

func (v NullableEntitiesUserStatus) Get() *EntitiesUserStatus {
	return v.value
}

func (v *NullableEntitiesUserStatus) Set(val *EntitiesUserStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesUserStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesUserStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesUserStatus(val *EntitiesUserStatus) *NullableEntitiesUserStatus {
	return &NullableEntitiesUserStatus{value: val, isSet: true}
}

func (v NullableEntitiesUserStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesUserStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
