/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Tree type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tree{}

// Tree struct for Tree
type Tree struct {
	AdditionalInformation map[string]interface{} `json:"additional_information"`
	CreatedAt             string                 `json:"created_at"`
	Description           string                 `json:"description"`
	Id                    int32                  `json:"id"`
	Latitude              float32                `json:"latitude"`
	Longitude             float32                `json:"longitude"`
	Number                string                 `json:"number"`
	PlantingYear          int32                  `json:"planting_year"`
	Provider              string                 `json:"provider"`
	// Images              []*ImageResponse `json:\"images\"`
	Readonly       bool           `json:"readonly"`
	Sensor         *Sensor        `json:"sensor,omitempty"`
	Species        string         `json:"species"`
	TreeClusterId  *int32         `json:"tree_cluster_id,omitempty"`
	UpdatedAt      string         `json:"updated_at"`
	WateringStatus WateringStatus `json:"watering_status"`
}

type _Tree Tree

// NewTree instantiates a new Tree object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTree(additionalInformation map[string]interface{}, createdAt string, description string, id int32, latitude float32, longitude float32, number string, plantingYear int32, provider string, readonly bool, species string, updatedAt string, wateringStatus WateringStatus) *Tree {
	this := Tree{}
	this.AdditionalInformation = additionalInformation
	this.CreatedAt = createdAt
	this.Description = description
	this.Id = id
	this.Latitude = latitude
	this.Longitude = longitude
	this.Number = number
	this.PlantingYear = plantingYear
	this.Provider = provider
	this.Readonly = readonly
	this.Species = species
	this.UpdatedAt = updatedAt
	this.WateringStatus = wateringStatus
	return &this
}

// NewTreeWithDefaults instantiates a new Tree object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTreeWithDefaults() *Tree {
	this := Tree{}
	return &this
}

// GetAdditionalInformation returns the AdditionalInformation field value
func (o *Tree) GetAdditionalInformation() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.AdditionalInformation
}

// GetAdditionalInformationOk returns a tuple with the AdditionalInformation field value
// and a boolean to check if the value has been set.
func (o *Tree) GetAdditionalInformationOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.AdditionalInformation, true
}

// SetAdditionalInformation sets field value
func (o *Tree) SetAdditionalInformation(v map[string]interface{}) {
	o.AdditionalInformation = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Tree) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Tree) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Tree) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetDescription returns the Description field value
func (o *Tree) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Tree) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Tree) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *Tree) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Tree) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Tree) SetId(v int32) {
	o.Id = v
}

// GetLatitude returns the Latitude field value
func (o *Tree) GetLatitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *Tree) GetLatitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *Tree) SetLatitude(v float32) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *Tree) GetLongitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *Tree) GetLongitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *Tree) SetLongitude(v float32) {
	o.Longitude = v
}

// GetNumber returns the Number field value
func (o *Tree) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *Tree) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Tree) SetNumber(v string) {
	o.Number = v
}

// GetPlantingYear returns the PlantingYear field value
func (o *Tree) GetPlantingYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlantingYear
}

// GetPlantingYearOk returns a tuple with the PlantingYear field value
// and a boolean to check if the value has been set.
func (o *Tree) GetPlantingYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlantingYear, true
}

// SetPlantingYear sets field value
func (o *Tree) SetPlantingYear(v int32) {
	o.PlantingYear = v
}

// GetProvider returns the Provider field value
func (o *Tree) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *Tree) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *Tree) SetProvider(v string) {
	o.Provider = v
}

// GetReadonly returns the Readonly field value
func (o *Tree) GetReadonly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value
// and a boolean to check if the value has been set.
func (o *Tree) GetReadonlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Readonly, true
}

// SetReadonly sets field value
func (o *Tree) SetReadonly(v bool) {
	o.Readonly = v
}

// GetSensor returns the Sensor field value if set, zero value otherwise.
func (o *Tree) GetSensor() Sensor {
	if o == nil || IsNil(o.Sensor) {
		var ret Sensor
		return ret
	}
	return *o.Sensor
}

// GetSensorOk returns a tuple with the Sensor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tree) GetSensorOk() (*Sensor, bool) {
	if o == nil || IsNil(o.Sensor) {
		return nil, false
	}
	return o.Sensor, true
}

// HasSensor returns a boolean if a field has been set.
func (o *Tree) HasSensor() bool {
	if o != nil && !IsNil(o.Sensor) {
		return true
	}

	return false
}

// SetSensor gets a reference to the given Sensor and assigns it to the Sensor field.
func (o *Tree) SetSensor(v Sensor) {
	o.Sensor = &v
}

// GetSpecies returns the Species field value
func (o *Tree) GetSpecies() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Species
}

// GetSpeciesOk returns a tuple with the Species field value
// and a boolean to check if the value has been set.
func (o *Tree) GetSpeciesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Species, true
}

// SetSpecies sets field value
func (o *Tree) SetSpecies(v string) {
	o.Species = v
}

// GetTreeClusterId returns the TreeClusterId field value if set, zero value otherwise.
func (o *Tree) GetTreeClusterId() int32 {
	if o == nil || IsNil(o.TreeClusterId) {
		var ret int32
		return ret
	}
	return *o.TreeClusterId
}

// GetTreeClusterIdOk returns a tuple with the TreeClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tree) GetTreeClusterIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TreeClusterId) {
		return nil, false
	}
	return o.TreeClusterId, true
}

// HasTreeClusterId returns a boolean if a field has been set.
func (o *Tree) HasTreeClusterId() bool {
	if o != nil && !IsNil(o.TreeClusterId) {
		return true
	}

	return false
}

// SetTreeClusterId gets a reference to the given int32 and assigns it to the TreeClusterId field.
func (o *Tree) SetTreeClusterId(v int32) {
	o.TreeClusterId = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Tree) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Tree) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Tree) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetWateringStatus returns the WateringStatus field value
func (o *Tree) GetWateringStatus() WateringStatus {
	if o == nil {
		var ret WateringStatus
		return ret
	}

	return o.WateringStatus
}

// GetWateringStatusOk returns a tuple with the WateringStatus field value
// and a boolean to check if the value has been set.
func (o *Tree) GetWateringStatusOk() (*WateringStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WateringStatus, true
}

// SetWateringStatus sets field value
func (o *Tree) SetWateringStatus(v WateringStatus) {
	o.WateringStatus = v
}

func (o Tree) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tree) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["additional_information"] = o.AdditionalInformation
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["description"] = o.Description
	toSerialize["id"] = o.Id
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	toSerialize["number"] = o.Number
	toSerialize["planting_year"] = o.PlantingYear
	toSerialize["provider"] = o.Provider
	toSerialize["readonly"] = o.Readonly
	if !IsNil(o.Sensor) {
		toSerialize["sensor"] = o.Sensor
	}
	toSerialize["species"] = o.Species
	if !IsNil(o.TreeClusterId) {
		toSerialize["tree_cluster_id"] = o.TreeClusterId
	}
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["watering_status"] = o.WateringStatus
	return toSerialize, nil
}

func (o *Tree) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"additional_information",
		"created_at",
		"description",
		"id",
		"latitude",
		"longitude",
		"number",
		"planting_year",
		"provider",
		"readonly",
		"species",
		"updated_at",
		"watering_status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTree := _Tree{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTree)

	if err != nil {
		return err
	}

	*o = Tree(varTree)

	return err
}

type NullableTree struct {
	value *Tree
	isSet bool
}

func (v NullableTree) Get() *Tree {
	return v.value
}

func (v *NullableTree) Set(val *Tree) {
	v.value = val
	v.isSet = true
}

func (v NullableTree) IsSet() bool {
	return v.isSet
}

func (v *NullableTree) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTree(val *Tree) *NullableTree {
	return &NullableTree{value: val, isSet: true}
}

func (v NullableTree) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTree) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
