/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EntitiesDrivingLicense the model 'EntitiesDrivingLicense'
type EntitiesDrivingLicense string

// List of entities.DrivingLicense
const (
	DrivingLicenseB       EntitiesDrivingLicense = "B"
	DrivingLicenseBE      EntitiesDrivingLicense = "BE"
	DrivingLicenseC       EntitiesDrivingLicense = "C"
	DrivingLicenseCE      EntitiesDrivingLicense = "CE"
	DrivingLicenseUnknown EntitiesDrivingLicense = "Unknown"
)

// All allowed values of EntitiesDrivingLicense enum
var AllowedEntitiesDrivingLicenseEnumValues = []EntitiesDrivingLicense{
	"B",
	"BE",
	"C",
	"CE",
	"Unknown",
}

func (v *EntitiesDrivingLicense) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitiesDrivingLicense(value)
	for _, existing := range AllowedEntitiesDrivingLicenseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitiesDrivingLicense", value)
}

// NewEntitiesDrivingLicenseFromValue returns a pointer to a valid EntitiesDrivingLicense
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitiesDrivingLicenseFromValue(v string) (*EntitiesDrivingLicense, error) {
	ev := EntitiesDrivingLicense(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitiesDrivingLicense: valid values are %v", v, AllowedEntitiesDrivingLicenseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitiesDrivingLicense) IsValid() bool {
	for _, existing := range AllowedEntitiesDrivingLicenseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to entities.DrivingLicense value
func (v EntitiesDrivingLicense) Ptr() *EntitiesDrivingLicense {
	return &v
}

type NullableEntitiesDrivingLicense struct {
	value *EntitiesDrivingLicense
	isSet bool
}

func (v NullableEntitiesDrivingLicense) Get() *EntitiesDrivingLicense {
	return v.value
}

func (v *NullableEntitiesDrivingLicense) Set(val *EntitiesDrivingLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesDrivingLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesDrivingLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesDrivingLicense(val *EntitiesDrivingLicense) *NullableEntitiesDrivingLicense {
	return &NullableEntitiesDrivingLicense{value: val, isSet: true}
}

func (v NullableEntitiesDrivingLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesDrivingLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
