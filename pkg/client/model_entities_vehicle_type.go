/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EntitiesVehicleType the model 'EntitiesVehicleType'
type EntitiesVehicleType string

// List of entities.VehicleType
const (
	VehicleTypeTransporter EntitiesVehicleType = "transporter"
	VehicleTypeTrailer     EntitiesVehicleType = "trailer"
	VehicleTypeUnknown     EntitiesVehicleType = "unknown"
)

// All allowed values of EntitiesVehicleType enum
var AllowedEntitiesVehicleTypeEnumValues = []EntitiesVehicleType{
	"transporter",
	"trailer",
	"unknown",
}

func (v *EntitiesVehicleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitiesVehicleType(value)
	for _, existing := range AllowedEntitiesVehicleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitiesVehicleType", value)
}

// NewEntitiesVehicleTypeFromValue returns a pointer to a valid EntitiesVehicleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitiesVehicleTypeFromValue(v string) (*EntitiesVehicleType, error) {
	ev := EntitiesVehicleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitiesVehicleType: valid values are %v", v, AllowedEntitiesVehicleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitiesVehicleType) IsValid() bool {
	for _, existing := range AllowedEntitiesVehicleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to entities.VehicleType value
func (v EntitiesVehicleType) Ptr() *EntitiesVehicleType {
	return &v
}

type NullableEntitiesVehicleType struct {
	value *EntitiesVehicleType
	isSet bool
}

func (v NullableEntitiesVehicleType) Get() *EntitiesVehicleType {
	return v.value
}

func (v *NullableEntitiesVehicleType) Set(val *EntitiesVehicleType) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesVehicleType) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesVehicleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesVehicleType(val *EntitiesVehicleType) *NullableEntitiesVehicleType {
	return &NullableEntitiesVehicleType{value: val, isSet: true}
}

func (v NullableEntitiesVehicleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesVehicleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
