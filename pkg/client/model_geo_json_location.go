/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GeoJSONLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoJSONLocation{}

// GeoJSONLocation struct for GeoJSONLocation
type GeoJSONLocation struct {
	Latitude  float32 `json:"latitude"`
	Longitude float32 `json:"longitude"`
}

type _GeoJSONLocation GeoJSONLocation

// NewGeoJSONLocation instantiates a new GeoJSONLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoJSONLocation(latitude float32, longitude float32) *GeoJSONLocation {
	this := GeoJSONLocation{}
	this.Latitude = latitude
	this.Longitude = longitude
	return &this
}

// NewGeoJSONLocationWithDefaults instantiates a new GeoJSONLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoJSONLocationWithDefaults() *GeoJSONLocation {
	this := GeoJSONLocation{}
	return &this
}

// GetLatitude returns the Latitude field value
func (o *GeoJSONLocation) GetLatitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *GeoJSONLocation) GetLatitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *GeoJSONLocation) SetLatitude(v float32) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *GeoJSONLocation) GetLongitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *GeoJSONLocation) GetLongitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *GeoJSONLocation) SetLongitude(v float32) {
	o.Longitude = v
}

func (o GeoJSONLocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoJSONLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	return toSerialize, nil
}

func (o *GeoJSONLocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"latitude",
		"longitude",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGeoJSONLocation := _GeoJSONLocation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGeoJSONLocation)

	if err != nil {
		return err
	}

	*o = GeoJSONLocation(varGeoJSONLocation)

	return err
}

type NullableGeoJSONLocation struct {
	value *GeoJSONLocation
	isSet bool
}

func (v NullableGeoJSONLocation) Get() *GeoJSONLocation {
	return v.value
}

func (v *NullableGeoJSONLocation) Set(val *GeoJSONLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoJSONLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoJSONLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoJSONLocation(val *GeoJSONLocation) *NullableGeoJSONLocation {
	return &NullableGeoJSONLocation{value: val, isSet: true}
}

func (v NullableGeoJSONLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoJSONLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
