/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EntitiesWateringStatus the model 'EntitiesWateringStatus'
type EntitiesWateringStatus string

// List of entities.WateringStatus
const (
	WateringStatusGood        EntitiesWateringStatus = "good"
	WateringStatusModerate    EntitiesWateringStatus = "moderate"
	WateringStatusBad         EntitiesWateringStatus = "bad"
	WateringStatusJustWatered EntitiesWateringStatus = "just watered"
	WateringStatusUnknown     EntitiesWateringStatus = "unknown"
)

// All allowed values of EntitiesWateringStatus enum
var AllowedEntitiesWateringStatusEnumValues = []EntitiesWateringStatus{
	"good",
	"moderate",
	"bad",
	"just watered",
	"unknown",
}

func (v *EntitiesWateringStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitiesWateringStatus(value)
	for _, existing := range AllowedEntitiesWateringStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitiesWateringStatus", value)
}

// NewEntitiesWateringStatusFromValue returns a pointer to a valid EntitiesWateringStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitiesWateringStatusFromValue(v string) (*EntitiesWateringStatus, error) {
	ev := EntitiesWateringStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitiesWateringStatus: valid values are %v", v, AllowedEntitiesWateringStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitiesWateringStatus) IsValid() bool {
	for _, existing := range AllowedEntitiesWateringStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to entities.WateringStatus value
func (v EntitiesWateringStatus) Ptr() *EntitiesWateringStatus {
	return &v
}

type NullableEntitiesWateringStatus struct {
	value *EntitiesWateringStatus
	isSet bool
}

func (v NullableEntitiesWateringStatus) Get() *EntitiesWateringStatus {
	return v.value
}

func (v *NullableEntitiesWateringStatus) Set(val *EntitiesWateringStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesWateringStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesWateringStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesWateringStatus(val *EntitiesWateringStatus) *NullableEntitiesWateringStatus {
	return &NullableEntitiesWateringStatus{value: val, isSet: true}
}

func (v NullableEntitiesWateringStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesWateringStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
