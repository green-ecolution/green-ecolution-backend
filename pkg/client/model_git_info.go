/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GitInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitInfo{}

// GitInfo struct for GitInfo
type GitInfo struct {
	Branch     string `json:"branch"`
	Commit     string `json:"commit"`
	Repository string `json:"repository"`
}

type _GitInfo GitInfo

// NewGitInfo instantiates a new GitInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitInfo(branch string, commit string, repository string) *GitInfo {
	this := GitInfo{}
	this.Branch = branch
	this.Commit = commit
	this.Repository = repository
	return &this
}

// NewGitInfoWithDefaults instantiates a new GitInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitInfoWithDefaults() *GitInfo {
	this := GitInfo{}
	return &this
}

// GetBranch returns the Branch field value
func (o *GitInfo) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *GitInfo) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *GitInfo) SetBranch(v string) {
	o.Branch = v
}

// GetCommit returns the Commit field value
func (o *GitInfo) GetCommit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Commit
}

// GetCommitOk returns a tuple with the Commit field value
// and a boolean to check if the value has been set.
func (o *GitInfo) GetCommitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Commit, true
}

// SetCommit sets field value
func (o *GitInfo) SetCommit(v string) {
	o.Commit = v
}

// GetRepository returns the Repository field value
func (o *GitInfo) GetRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *GitInfo) GetRepositoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *GitInfo) SetRepository(v string) {
	o.Repository = v
}

func (o GitInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["branch"] = o.Branch
	toSerialize["commit"] = o.Commit
	toSerialize["repository"] = o.Repository
	return toSerialize, nil
}

func (o *GitInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"branch",
		"commit",
		"repository",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitInfo := _GitInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGitInfo)

	if err != nil {
		return err
	}

	*o = GitInfo(varGitInfo)

	return err
}

type NullableGitInfo struct {
	value *GitInfo
	isSet bool
}

func (v NullableGitInfo) Get() *GitInfo {
	return v.value
}

func (v *NullableGitInfo) Set(val *GitInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableGitInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableGitInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitInfo(val *GitInfo) *NullableGitInfo {
	return &NullableGitInfo{value: val, isSet: true}
}

func (v NullableGitInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
