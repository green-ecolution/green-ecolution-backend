/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the EntitiesGeoJSONLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntitiesGeoJSONLocation{}

// EntitiesGeoJSONLocation struct for EntitiesGeoJSONLocation
type EntitiesGeoJSONLocation struct {
	Latitude  *float32 `json:"latitude,omitempty"`
	Longitude *float32 `json:"longitude,omitempty"`
}

// NewEntitiesGeoJSONLocation instantiates a new EntitiesGeoJSONLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitiesGeoJSONLocation() *EntitiesGeoJSONLocation {
	this := EntitiesGeoJSONLocation{}
	return &this
}

// NewEntitiesGeoJSONLocationWithDefaults instantiates a new EntitiesGeoJSONLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitiesGeoJSONLocationWithDefaults() *EntitiesGeoJSONLocation {
	this := EntitiesGeoJSONLocation{}
	return &this
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *EntitiesGeoJSONLocation) GetLatitude() float32 {
	if o == nil || IsNil(o.Latitude) {
		var ret float32
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitiesGeoJSONLocation) GetLatitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *EntitiesGeoJSONLocation) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float32 and assigns it to the Latitude field.
func (o *EntitiesGeoJSONLocation) SetLatitude(v float32) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *EntitiesGeoJSONLocation) GetLongitude() float32 {
	if o == nil || IsNil(o.Longitude) {
		var ret float32
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitiesGeoJSONLocation) GetLongitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *EntitiesGeoJSONLocation) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float32 and assigns it to the Longitude field.
func (o *EntitiesGeoJSONLocation) SetLongitude(v float32) {
	o.Longitude = &v
}

func (o EntitiesGeoJSONLocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntitiesGeoJSONLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	return toSerialize, nil
}

type NullableEntitiesGeoJSONLocation struct {
	value *EntitiesGeoJSONLocation
	isSet bool
}

func (v NullableEntitiesGeoJSONLocation) Get() *EntitiesGeoJSONLocation {
	return v.value
}

func (v *NullableEntitiesGeoJSONLocation) Set(val *EntitiesGeoJSONLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesGeoJSONLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesGeoJSONLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesGeoJSONLocation(val *EntitiesGeoJSONLocation) *NullableEntitiesGeoJSONLocation {
	return &NullableEntitiesGeoJSONLocation{value: val, isSet: true}
}

func (v NullableEntitiesGeoJSONLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesGeoJSONLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
