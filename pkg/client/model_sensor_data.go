/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SensorData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensorData{}

// SensorData struct for SensorData
type SensorData struct {
	Battery     float32             `json:"battery"`
	CreatedAt   string              `json:"created_at"`
	Humidity    float32             `json:"humidity"`
	Temperature float32             `json:"temperature"`
	UpdatedAt   string              `json:"updated_at"`
	Watermarks  []WatermarkResponse `json:"watermarks"`
}

type _SensorData SensorData

// NewSensorData instantiates a new SensorData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorData(battery float32, createdAt string, humidity float32, temperature float32, updatedAt string, watermarks []WatermarkResponse) *SensorData {
	this := SensorData{}
	this.Battery = battery
	this.CreatedAt = createdAt
	this.Humidity = humidity
	this.Temperature = temperature
	this.UpdatedAt = updatedAt
	this.Watermarks = watermarks
	return &this
}

// NewSensorDataWithDefaults instantiates a new SensorData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorDataWithDefaults() *SensorData {
	this := SensorData{}
	return &this
}

// GetBattery returns the Battery field value
func (o *SensorData) GetBattery() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Battery
}

// GetBatteryOk returns a tuple with the Battery field value
// and a boolean to check if the value has been set.
func (o *SensorData) GetBatteryOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Battery, true
}

// SetBattery sets field value
func (o *SensorData) SetBattery(v float32) {
	o.Battery = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *SensorData) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SensorData) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SensorData) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetHumidity returns the Humidity field value
func (o *SensorData) GetHumidity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Humidity
}

// GetHumidityOk returns a tuple with the Humidity field value
// and a boolean to check if the value has been set.
func (o *SensorData) GetHumidityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Humidity, true
}

// SetHumidity sets field value
func (o *SensorData) SetHumidity(v float32) {
	o.Humidity = v
}

// GetTemperature returns the Temperature field value
func (o *SensorData) GetTemperature() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value
// and a boolean to check if the value has been set.
func (o *SensorData) GetTemperatureOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Temperature, true
}

// SetTemperature sets field value
func (o *SensorData) SetTemperature(v float32) {
	o.Temperature = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *SensorData) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *SensorData) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *SensorData) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetWatermarks returns the Watermarks field value
func (o *SensorData) GetWatermarks() []WatermarkResponse {
	if o == nil {
		var ret []WatermarkResponse
		return ret
	}

	return o.Watermarks
}

// GetWatermarksOk returns a tuple with the Watermarks field value
// and a boolean to check if the value has been set.
func (o *SensorData) GetWatermarksOk() ([]WatermarkResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Watermarks, true
}

// SetWatermarks sets field value
func (o *SensorData) SetWatermarks(v []WatermarkResponse) {
	o.Watermarks = v
}

func (o SensorData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensorData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["battery"] = o.Battery
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["humidity"] = o.Humidity
	toSerialize["temperature"] = o.Temperature
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["watermarks"] = o.Watermarks
	return toSerialize, nil
}

func (o *SensorData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"battery",
		"created_at",
		"humidity",
		"temperature",
		"updated_at",
		"watermarks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSensorData := _SensorData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSensorData)

	if err != nil {
		return err
	}

	*o = SensorData(varSensorData)

	return err
}

type NullableSensorData struct {
	value *SensorData
	isSet bool
}

func (v NullableSensorData) Get() *SensorData {
	return v.value
}

func (v *NullableSensorData) Set(val *SensorData) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorData) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorData(val *SensorData) *NullableSensorData {
	return &NullableSensorData{value: val, isSet: true}
}

func (v NullableSensorData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
