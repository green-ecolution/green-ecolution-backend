/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GeoJsonFeature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoJsonFeature{}

// GeoJsonFeature struct for GeoJsonFeature
type GeoJsonFeature struct {
	Bbox       []float32                         `json:"bbox"`
	Geometry   GeoJsonGeometry                   `json:"geometry"`
	Properties map[string]map[string]interface{} `json:"properties"`
	Type       GeoJsonType                       `json:"type"`
}

type _GeoJsonFeature GeoJsonFeature

// NewGeoJsonFeature instantiates a new GeoJsonFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoJsonFeature(bbox []float32, geometry GeoJsonGeometry, properties map[string]map[string]interface{}, type_ GeoJsonType) *GeoJsonFeature {
	this := GeoJsonFeature{}
	this.Bbox = bbox
	this.Geometry = geometry
	this.Properties = properties
	this.Type = type_
	return &this
}

// NewGeoJsonFeatureWithDefaults instantiates a new GeoJsonFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoJsonFeatureWithDefaults() *GeoJsonFeature {
	this := GeoJsonFeature{}
	return &this
}

// GetBbox returns the Bbox field value
func (o *GeoJsonFeature) GetBbox() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.Bbox
}

// GetBboxOk returns a tuple with the Bbox field value
// and a boolean to check if the value has been set.
func (o *GeoJsonFeature) GetBboxOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bbox, true
}

// SetBbox sets field value
func (o *GeoJsonFeature) SetBbox(v []float32) {
	o.Bbox = v
}

// GetGeometry returns the Geometry field value
func (o *GeoJsonFeature) GetGeometry() GeoJsonGeometry {
	if o == nil {
		var ret GeoJsonGeometry
		return ret
	}

	return o.Geometry
}

// GetGeometryOk returns a tuple with the Geometry field value
// and a boolean to check if the value has been set.
func (o *GeoJsonFeature) GetGeometryOk() (*GeoJsonGeometry, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Geometry, true
}

// SetGeometry sets field value
func (o *GeoJsonFeature) SetGeometry(v GeoJsonGeometry) {
	o.Geometry = v
}

// GetProperties returns the Properties field value
func (o *GeoJsonFeature) GetProperties() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *GeoJsonFeature) GetPropertiesOk() (map[string]map[string]interface{}, bool) {
	if o == nil {
		return map[string]map[string]interface{}{}, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *GeoJsonFeature) SetProperties(v map[string]map[string]interface{}) {
	o.Properties = v
}

// GetType returns the Type field value
func (o *GeoJsonFeature) GetType() GeoJsonType {
	if o == nil {
		var ret GeoJsonType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GeoJsonFeature) GetTypeOk() (*GeoJsonType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GeoJsonFeature) SetType(v GeoJsonType) {
	o.Type = v
}

func (o GeoJsonFeature) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoJsonFeature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bbox"] = o.Bbox
	toSerialize["geometry"] = o.Geometry
	toSerialize["properties"] = o.Properties
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *GeoJsonFeature) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bbox",
		"geometry",
		"properties",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGeoJsonFeature := _GeoJsonFeature{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGeoJsonFeature)

	if err != nil {
		return err
	}

	*o = GeoJsonFeature(varGeoJsonFeature)

	return err
}

type NullableGeoJsonFeature struct {
	value *GeoJsonFeature
	isSet bool
}

func (v NullableGeoJsonFeature) Get() *GeoJsonFeature {
	return v.value
}

func (v *NullableGeoJsonFeature) Set(val *GeoJsonFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoJsonFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoJsonFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoJsonFeature(val *GeoJsonFeature) *NullableGeoJsonFeature {
	return &NullableGeoJsonFeature{value: val, isSet: true}
}

func (v NullableGeoJsonFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoJsonFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
