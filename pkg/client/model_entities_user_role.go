/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EntitiesUserRole the model 'EntitiesUserRole'
type EntitiesUserRole string

// List of entities.UserRole
const (
	UserRoleTbz               EntitiesUserRole = "tbz"
	UserRoleGreenEcolution    EntitiesUserRole = "green-ecolution"
	UserRoleSmarteGrenzregion EntitiesUserRole = "smarte-grenzregion"
	UserRoleUnknown           EntitiesUserRole = "unknown"
)

// All allowed values of EntitiesUserRole enum
var AllowedEntitiesUserRoleEnumValues = []EntitiesUserRole{
	"tbz",
	"green-ecolution",
	"smarte-grenzregion",
	"unknown",
}

func (v *EntitiesUserRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitiesUserRole(value)
	for _, existing := range AllowedEntitiesUserRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitiesUserRole", value)
}

// NewEntitiesUserRoleFromValue returns a pointer to a valid EntitiesUserRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitiesUserRoleFromValue(v string) (*EntitiesUserRole, error) {
	ev := EntitiesUserRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitiesUserRole: valid values are %v", v, AllowedEntitiesUserRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitiesUserRole) IsValid() bool {
	for _, existing := range AllowedEntitiesUserRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to entities.UserRole value
func (v EntitiesUserRole) Ptr() *EntitiesUserRole {
	return &v
}

type NullableEntitiesUserRole struct {
	value *EntitiesUserRole
	isSet bool
}

func (v NullableEntitiesUserRole) Get() *EntitiesUserRole {
	return v.value
}

func (v *NullableEntitiesUserRole) Set(val *EntitiesUserRole) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesUserRole) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesUserRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesUserRole(val *EntitiesUserRole) *NullableEntitiesUserRole {
	return &NullableEntitiesUserRole{value: val, isSet: true}
}

func (v NullableEntitiesUserRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesUserRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
