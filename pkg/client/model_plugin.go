/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Plugin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Plugin{}

// Plugin struct for Plugin
type Plugin struct {
	Description string `json:"description"`
	HostPath    string `json:"host_path"`
	Name        string `json:"name"`
	Slug        string `json:"slug"`
	Version     string `json:"version"`
}

type _Plugin Plugin

// NewPlugin instantiates a new Plugin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlugin(description string, hostPath string, name string, slug string, version string) *Plugin {
	this := Plugin{}
	this.Description = description
	this.HostPath = hostPath
	this.Name = name
	this.Slug = slug
	this.Version = version
	return &this
}

// NewPluginWithDefaults instantiates a new Plugin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginWithDefaults() *Plugin {
	this := Plugin{}
	return &this
}

// GetDescription returns the Description field value
func (o *Plugin) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Plugin) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Plugin) SetDescription(v string) {
	o.Description = v
}

// GetHostPath returns the HostPath field value
func (o *Plugin) GetHostPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostPath
}

// GetHostPathOk returns a tuple with the HostPath field value
// and a boolean to check if the value has been set.
func (o *Plugin) GetHostPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostPath, true
}

// SetHostPath sets field value
func (o *Plugin) SetHostPath(v string) {
	o.HostPath = v
}

// GetName returns the Name field value
func (o *Plugin) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Plugin) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Plugin) SetName(v string) {
	o.Name = v
}

// GetSlug returns the Slug field value
func (o *Plugin) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *Plugin) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *Plugin) SetSlug(v string) {
	o.Slug = v
}

// GetVersion returns the Version field value
func (o *Plugin) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Plugin) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Plugin) SetVersion(v string) {
	o.Version = v
}

func (o Plugin) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Plugin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["host_path"] = o.HostPath
	toSerialize["name"] = o.Name
	toSerialize["slug"] = o.Slug
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *Plugin) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"host_path",
		"name",
		"slug",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlugin := _Plugin{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlugin)

	if err != nil {
		return err
	}

	*o = Plugin(varPlugin)

	return err
}

type NullablePlugin struct {
	value *Plugin
	isSet bool
}

func (v NullablePlugin) Get() *Plugin {
	return v.value
}

func (v *NullablePlugin) Set(val *Plugin) {
	v.value = val
	v.isSet = true
}

func (v NullablePlugin) IsSet() bool {
	return v.isSet
}

func (v *NullablePlugin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlugin(val *Plugin) *NullablePlugin {
	return &NullablePlugin{value: val, isSet: true}
}

func (v NullablePlugin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlugin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
