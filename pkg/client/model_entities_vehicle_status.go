/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EntitiesVehicleStatus the model 'EntitiesVehicleStatus'
type EntitiesVehicleStatus string

// List of entities.VehicleStatus
const (
	VehicleStatusActive       EntitiesVehicleStatus = "active"
	VehicleStatusAvailable    EntitiesVehicleStatus = "available"
	VehicleStatusNotAvailable EntitiesVehicleStatus = "not available"
	VehicleStatusUnknown      EntitiesVehicleStatus = "unknown"
)

// All allowed values of EntitiesVehicleStatus enum
var AllowedEntitiesVehicleStatusEnumValues = []EntitiesVehicleStatus{
	"active",
	"available",
	"not available",
	"unknown",
}

func (v *EntitiesVehicleStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitiesVehicleStatus(value)
	for _, existing := range AllowedEntitiesVehicleStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitiesVehicleStatus", value)
}

// NewEntitiesVehicleStatusFromValue returns a pointer to a valid EntitiesVehicleStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitiesVehicleStatusFromValue(v string) (*EntitiesVehicleStatus, error) {
	ev := EntitiesVehicleStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitiesVehicleStatus: valid values are %v", v, AllowedEntitiesVehicleStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitiesVehicleStatus) IsValid() bool {
	for _, existing := range AllowedEntitiesVehicleStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to entities.VehicleStatus value
func (v EntitiesVehicleStatus) Ptr() *EntitiesVehicleStatus {
	return &v
}

type NullableEntitiesVehicleStatus struct {
	value *EntitiesVehicleStatus
	isSet bool
}

func (v NullableEntitiesVehicleStatus) Get() *EntitiesVehicleStatus {
	return v.value
}

func (v *NullableEntitiesVehicleStatus) Set(val *EntitiesVehicleStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesVehicleStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesVehicleStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesVehicleStatus(val *EntitiesVehicleStatus) *NullableEntitiesVehicleStatus {
	return &NullableEntitiesVehicleStatus{value: val, isSet: true}
}

func (v NullableEntitiesVehicleStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesVehicleStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
