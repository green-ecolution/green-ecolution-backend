/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MapInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MapInfo{}

// MapInfo struct for MapInfo
type MapInfo struct {
	Bbox   []float32 `json:"bbox"`
	Center []float32 `json:"center"`
}

type _MapInfo MapInfo

// NewMapInfo instantiates a new MapInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapInfo(bbox []float32, center []float32) *MapInfo {
	this := MapInfo{}
	this.Bbox = bbox
	this.Center = center
	return &this
}

// NewMapInfoWithDefaults instantiates a new MapInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapInfoWithDefaults() *MapInfo {
	this := MapInfo{}
	return &this
}

// GetBbox returns the Bbox field value
func (o *MapInfo) GetBbox() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.Bbox
}

// GetBboxOk returns a tuple with the Bbox field value
// and a boolean to check if the value has been set.
func (o *MapInfo) GetBboxOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bbox, true
}

// SetBbox sets field value
func (o *MapInfo) SetBbox(v []float32) {
	o.Bbox = v
}

// GetCenter returns the Center field value
func (o *MapInfo) GetCenter() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.Center
}

// GetCenterOk returns a tuple with the Center field value
// and a boolean to check if the value has been set.
func (o *MapInfo) GetCenterOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Center, true
}

// SetCenter sets field value
func (o *MapInfo) SetCenter(v []float32) {
	o.Center = v
}

func (o MapInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MapInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bbox"] = o.Bbox
	toSerialize["center"] = o.Center
	return toSerialize, nil
}

func (o *MapInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bbox",
		"center",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMapInfo := _MapInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMapInfo)

	if err != nil {
		return err
	}

	*o = MapInfo(varMapInfo)

	return err
}

type NullableMapInfo struct {
	value *MapInfo
	isSet bool
}

func (v NullableMapInfo) Get() *MapInfo {
	return v.value
}

func (v *NullableMapInfo) Set(val *MapInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMapInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMapInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapInfo(val *MapInfo) *NullableMapInfo {
	return &NullableMapInfo{value: val, isSet: true}
}

func (v NullableMapInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
