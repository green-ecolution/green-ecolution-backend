/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WateringPlanInList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WateringPlanInList{}

// WateringPlanInList struct for WateringPlanInList
type WateringPlanInList struct {
	CancellationNote   string              `json:"cancellation_note"`
	CreatedAt          string              `json:"created_at"`
	Date               string              `json:"date"`
	Description        string              `json:"description"`
	Distance           float32             `json:"distance"`
	Id                 int32               `json:"id"`
	Status             WateringPlanStatus  `json:"status"`
	TotalWaterRequired float32             `json:"total_water_required"`
	Trailer            *Vehicle            `json:"trailer,omitempty"`
	Transporter        Vehicle             `json:"transporter"`
	Treeclusters       []TreeClusterInList `json:"treeclusters"`
	UpdatedAt          string              `json:"updated_at"`
	UserIds            []string            `json:"user_ids"`
}

type _WateringPlanInList WateringPlanInList

// NewWateringPlanInList instantiates a new WateringPlanInList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWateringPlanInList(cancellationNote string, createdAt string, date string, description string, distance float32, id int32, status WateringPlanStatus, totalWaterRequired float32, transporter Vehicle, treeclusters []TreeClusterInList, updatedAt string, userIds []string) *WateringPlanInList {
	this := WateringPlanInList{}
	this.CancellationNote = cancellationNote
	this.CreatedAt = createdAt
	this.Date = date
	this.Description = description
	this.Distance = distance
	this.Id = id
	this.Status = status
	this.TotalWaterRequired = totalWaterRequired
	this.Transporter = transporter
	this.Treeclusters = treeclusters
	this.UpdatedAt = updatedAt
	this.UserIds = userIds
	return &this
}

// NewWateringPlanInListWithDefaults instantiates a new WateringPlanInList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWateringPlanInListWithDefaults() *WateringPlanInList {
	this := WateringPlanInList{}
	return &this
}

// GetCancellationNote returns the CancellationNote field value
func (o *WateringPlanInList) GetCancellationNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CancellationNote
}

// GetCancellationNoteOk returns a tuple with the CancellationNote field value
// and a boolean to check if the value has been set.
func (o *WateringPlanInList) GetCancellationNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CancellationNote, true
}

// SetCancellationNote sets field value
func (o *WateringPlanInList) SetCancellationNote(v string) {
	o.CancellationNote = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *WateringPlanInList) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *WateringPlanInList) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *WateringPlanInList) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetDate returns the Date field value
func (o *WateringPlanInList) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *WateringPlanInList) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *WateringPlanInList) SetDate(v string) {
	o.Date = v
}

// GetDescription returns the Description field value
func (o *WateringPlanInList) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *WateringPlanInList) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *WateringPlanInList) SetDescription(v string) {
	o.Description = v
}

// GetDistance returns the Distance field value
func (o *WateringPlanInList) GetDistance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value
// and a boolean to check if the value has been set.
func (o *WateringPlanInList) GetDistanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distance, true
}

// SetDistance sets field value
func (o *WateringPlanInList) SetDistance(v float32) {
	o.Distance = v
}

// GetId returns the Id field value
func (o *WateringPlanInList) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WateringPlanInList) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WateringPlanInList) SetId(v int32) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *WateringPlanInList) GetStatus() WateringPlanStatus {
	if o == nil {
		var ret WateringPlanStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *WateringPlanInList) GetStatusOk() (*WateringPlanStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *WateringPlanInList) SetStatus(v WateringPlanStatus) {
	o.Status = v
}

// GetTotalWaterRequired returns the TotalWaterRequired field value
func (o *WateringPlanInList) GetTotalWaterRequired() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalWaterRequired
}

// GetTotalWaterRequiredOk returns a tuple with the TotalWaterRequired field value
// and a boolean to check if the value has been set.
func (o *WateringPlanInList) GetTotalWaterRequiredOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalWaterRequired, true
}

// SetTotalWaterRequired sets field value
func (o *WateringPlanInList) SetTotalWaterRequired(v float32) {
	o.TotalWaterRequired = v
}

// GetTrailer returns the Trailer field value if set, zero value otherwise.
func (o *WateringPlanInList) GetTrailer() Vehicle {
	if o == nil || IsNil(o.Trailer) {
		var ret Vehicle
		return ret
	}
	return *o.Trailer
}

// GetTrailerOk returns a tuple with the Trailer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WateringPlanInList) GetTrailerOk() (*Vehicle, bool) {
	if o == nil || IsNil(o.Trailer) {
		return nil, false
	}
	return o.Trailer, true
}

// HasTrailer returns a boolean if a field has been set.
func (o *WateringPlanInList) HasTrailer() bool {
	if o != nil && !IsNil(o.Trailer) {
		return true
	}

	return false
}

// SetTrailer gets a reference to the given Vehicle and assigns it to the Trailer field.
func (o *WateringPlanInList) SetTrailer(v Vehicle) {
	o.Trailer = &v
}

// GetTransporter returns the Transporter field value
func (o *WateringPlanInList) GetTransporter() Vehicle {
	if o == nil {
		var ret Vehicle
		return ret
	}

	return o.Transporter
}

// GetTransporterOk returns a tuple with the Transporter field value
// and a boolean to check if the value has been set.
func (o *WateringPlanInList) GetTransporterOk() (*Vehicle, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transporter, true
}

// SetTransporter sets field value
func (o *WateringPlanInList) SetTransporter(v Vehicle) {
	o.Transporter = v
}

// GetTreeclusters returns the Treeclusters field value
func (o *WateringPlanInList) GetTreeclusters() []TreeClusterInList {
	if o == nil {
		var ret []TreeClusterInList
		return ret
	}

	return o.Treeclusters
}

// GetTreeclustersOk returns a tuple with the Treeclusters field value
// and a boolean to check if the value has been set.
func (o *WateringPlanInList) GetTreeclustersOk() ([]TreeClusterInList, bool) {
	if o == nil {
		return nil, false
	}
	return o.Treeclusters, true
}

// SetTreeclusters sets field value
func (o *WateringPlanInList) SetTreeclusters(v []TreeClusterInList) {
	o.Treeclusters = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *WateringPlanInList) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *WateringPlanInList) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *WateringPlanInList) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetUserIds returns the UserIds field value
func (o *WateringPlanInList) GetUserIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value
// and a boolean to check if the value has been set.
func (o *WateringPlanInList) GetUserIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserIds, true
}

// SetUserIds sets field value
func (o *WateringPlanInList) SetUserIds(v []string) {
	o.UserIds = v
}

func (o WateringPlanInList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WateringPlanInList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cancellation_note"] = o.CancellationNote
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["date"] = o.Date
	toSerialize["description"] = o.Description
	toSerialize["distance"] = o.Distance
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	toSerialize["total_water_required"] = o.TotalWaterRequired
	if !IsNil(o.Trailer) {
		toSerialize["trailer"] = o.Trailer
	}
	toSerialize["transporter"] = o.Transporter
	toSerialize["treeclusters"] = o.Treeclusters
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["user_ids"] = o.UserIds
	return toSerialize, nil
}

func (o *WateringPlanInList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cancellation_note",
		"created_at",
		"date",
		"description",
		"distance",
		"id",
		"status",
		"total_water_required",
		"transporter",
		"treeclusters",
		"updated_at",
		"user_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWateringPlanInList := _WateringPlanInList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWateringPlanInList)

	if err != nil {
		return err
	}

	*o = WateringPlanInList(varWateringPlanInList)

	return err
}

type NullableWateringPlanInList struct {
	value *WateringPlanInList
	isSet bool
}

func (v NullableWateringPlanInList) Get() *WateringPlanInList {
	return v.value
}

func (v *NullableWateringPlanInList) Set(val *WateringPlanInList) {
	v.value = val
	v.isSet = true
}

func (v NullableWateringPlanInList) IsSet() bool {
	return v.isSet
}

func (v *NullableWateringPlanInList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWateringPlanInList(val *WateringPlanInList) *NullableWateringPlanInList {
	return &NullableWateringPlanInList{value: val, isSet: true}
}

func (v NullableWateringPlanInList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWateringPlanInList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
