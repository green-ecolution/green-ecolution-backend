/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AppInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppInfo{}

// AppInfo struct for AppInfo
type AppInfo struct {
	BuildTime string     `json:"buildTime"`
	Git       GitInfo    `json:"git"`
	GoVersion string     `json:"goVersion"`
	Server    ServerInfo `json:"server"`
	Version   string     `json:"version"`
}

type _AppInfo AppInfo

// NewAppInfo instantiates a new AppInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppInfo(buildTime string, git GitInfo, goVersion string, server ServerInfo, version string) *AppInfo {
	this := AppInfo{}
	this.BuildTime = buildTime
	this.Git = git
	this.GoVersion = goVersion
	this.Server = server
	this.Version = version
	return &this
}

// NewAppInfoWithDefaults instantiates a new AppInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppInfoWithDefaults() *AppInfo {
	this := AppInfo{}
	return &this
}

// GetBuildTime returns the BuildTime field value
func (o *AppInfo) GetBuildTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuildTime
}

// GetBuildTimeOk returns a tuple with the BuildTime field value
// and a boolean to check if the value has been set.
func (o *AppInfo) GetBuildTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildTime, true
}

// SetBuildTime sets field value
func (o *AppInfo) SetBuildTime(v string) {
	o.BuildTime = v
}

// GetGit returns the Git field value
func (o *AppInfo) GetGit() GitInfo {
	if o == nil {
		var ret GitInfo
		return ret
	}

	return o.Git
}

// GetGitOk returns a tuple with the Git field value
// and a boolean to check if the value has been set.
func (o *AppInfo) GetGitOk() (*GitInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Git, true
}

// SetGit sets field value
func (o *AppInfo) SetGit(v GitInfo) {
	o.Git = v
}

// GetGoVersion returns the GoVersion field value
func (o *AppInfo) GetGoVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GoVersion
}

// GetGoVersionOk returns a tuple with the GoVersion field value
// and a boolean to check if the value has been set.
func (o *AppInfo) GetGoVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GoVersion, true
}

// SetGoVersion sets field value
func (o *AppInfo) SetGoVersion(v string) {
	o.GoVersion = v
}

// GetServer returns the Server field value
func (o *AppInfo) GetServer() ServerInfo {
	if o == nil {
		var ret ServerInfo
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *AppInfo) GetServerOk() (*ServerInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *AppInfo) SetServer(v ServerInfo) {
	o.Server = v
}

// GetVersion returns the Version field value
func (o *AppInfo) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *AppInfo) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *AppInfo) SetVersion(v string) {
	o.Version = v
}

func (o AppInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["buildTime"] = o.BuildTime
	toSerialize["git"] = o.Git
	toSerialize["goVersion"] = o.GoVersion
	toSerialize["server"] = o.Server
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *AppInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"buildTime",
		"git",
		"goVersion",
		"server",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppInfo := _AppInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppInfo)

	if err != nil {
		return err
	}

	*o = AppInfo(varAppInfo)

	return err
}

type NullableAppInfo struct {
	value *AppInfo
	isSet bool
}

func (v NullableAppInfo) Get() *AppInfo {
	return v.value
}

func (v *NullableAppInfo) Set(val *AppInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAppInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAppInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppInfo(val *AppInfo) *NullableAppInfo {
	return &NullableAppInfo{value: val, isSet: true}
}

func (v NullableAppInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
