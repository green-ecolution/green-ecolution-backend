/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EntitiesTreeSoilCondition the model 'EntitiesTreeSoilCondition'
type EntitiesTreeSoilCondition string

// List of entities.TreeSoilCondition
const (
	TreeSoilConditionSchluffig EntitiesTreeSoilCondition = "schluffig"
	TreeSoilConditionSandig    EntitiesTreeSoilCondition = "sandig"
	TreeSoilConditionLehmig    EntitiesTreeSoilCondition = "lehmig"
	TreeSoilConditionTonig     EntitiesTreeSoilCondition = "tonig"
	TreeSoilConditionUnknown   EntitiesTreeSoilCondition = "unknown"
)

// All allowed values of EntitiesTreeSoilCondition enum
var AllowedEntitiesTreeSoilConditionEnumValues = []EntitiesTreeSoilCondition{
	"schluffig",
	"sandig",
	"lehmig",
	"tonig",
	"unknown",
}

func (v *EntitiesTreeSoilCondition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitiesTreeSoilCondition(value)
	for _, existing := range AllowedEntitiesTreeSoilConditionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitiesTreeSoilCondition", value)
}

// NewEntitiesTreeSoilConditionFromValue returns a pointer to a valid EntitiesTreeSoilCondition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitiesTreeSoilConditionFromValue(v string) (*EntitiesTreeSoilCondition, error) {
	ev := EntitiesTreeSoilCondition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitiesTreeSoilCondition: valid values are %v", v, AllowedEntitiesTreeSoilConditionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitiesTreeSoilCondition) IsValid() bool {
	for _, existing := range AllowedEntitiesTreeSoilConditionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to entities.TreeSoilCondition value
func (v EntitiesTreeSoilCondition) Ptr() *EntitiesTreeSoilCondition {
	return &v
}

type NullableEntitiesTreeSoilCondition struct {
	value *EntitiesTreeSoilCondition
	isSet bool
}

func (v NullableEntitiesTreeSoilCondition) Get() *EntitiesTreeSoilCondition {
	return v.value
}

func (v *NullableEntitiesTreeSoilCondition) Set(val *EntitiesTreeSoilCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesTreeSoilCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesTreeSoilCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesTreeSoilCondition(val *EntitiesTreeSoilCondition) *NullableEntitiesTreeSoilCondition {
	return &NullableEntitiesTreeSoilCondition{value: val, isSet: true}
}

func (v NullableEntitiesTreeSoilCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesTreeSoilCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
