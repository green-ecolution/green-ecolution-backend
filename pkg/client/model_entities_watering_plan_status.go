/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EntitiesWateringPlanStatus the model 'EntitiesWateringPlanStatus'
type EntitiesWateringPlanStatus string

// List of entities.WateringPlanStatus
const (
	WateringPlanStatusPlanned     EntitiesWateringPlanStatus = "planned"
	WateringPlanStatusActive      EntitiesWateringPlanStatus = "active"
	WateringPlanStatusCanceled    EntitiesWateringPlanStatus = "canceled"
	WateringPlanStatusFinished    EntitiesWateringPlanStatus = "finished"
	WateringPlanStatusNotCompeted EntitiesWateringPlanStatus = "not competed"
	WateringPlanStatusUnknown     EntitiesWateringPlanStatus = "unknown"
)

// All allowed values of EntitiesWateringPlanStatus enum
var AllowedEntitiesWateringPlanStatusEnumValues = []EntitiesWateringPlanStatus{
	"planned",
	"active",
	"canceled",
	"finished",
	"not competed",
	"unknown",
}

func (v *EntitiesWateringPlanStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitiesWateringPlanStatus(value)
	for _, existing := range AllowedEntitiesWateringPlanStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitiesWateringPlanStatus", value)
}

// NewEntitiesWateringPlanStatusFromValue returns a pointer to a valid EntitiesWateringPlanStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitiesWateringPlanStatusFromValue(v string) (*EntitiesWateringPlanStatus, error) {
	ev := EntitiesWateringPlanStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitiesWateringPlanStatus: valid values are %v", v, AllowedEntitiesWateringPlanStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitiesWateringPlanStatus) IsValid() bool {
	for _, existing := range AllowedEntitiesWateringPlanStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to entities.WateringPlanStatus value
func (v EntitiesWateringPlanStatus) Ptr() *EntitiesWateringPlanStatus {
	return &v
}

type NullableEntitiesWateringPlanStatus struct {
	value *EntitiesWateringPlanStatus
	isSet bool
}

func (v NullableEntitiesWateringPlanStatus) Get() *EntitiesWateringPlanStatus {
	return v.value
}

func (v *NullableEntitiesWateringPlanStatus) Set(val *EntitiesWateringPlanStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesWateringPlanStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesWateringPlanStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesWateringPlanStatus(val *EntitiesWateringPlanStatus) *NullableEntitiesWateringPlanStatus {
	return &NullableEntitiesWateringPlanStatus{value: val, isSet: true}
}

func (v NullableEntitiesWateringPlanStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesWateringPlanStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
