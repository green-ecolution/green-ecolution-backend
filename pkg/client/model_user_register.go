/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserRegister type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserRegister{}

// UserRegister struct for UserRegister
type UserRegister struct {
	AvatarUrl   string   `json:"avatar_url"`
	Email       string   `json:"email"`
	EmployeeId  string   `json:"employee_id"`
	FirstName   string   `json:"first_name"`
	LastName    string   `json:"last_name"`
	Password    string   `json:"password"`
	PhoneNumber string   `json:"phone_number"`
	Roles       []string `json:"roles"`
	Username    string   `json:"username"`
}

type _UserRegister UserRegister

// NewUserRegister instantiates a new UserRegister object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserRegister(avatarUrl string, email string, employeeId string, firstName string, lastName string, password string, phoneNumber string, roles []string, username string) *UserRegister {
	this := UserRegister{}
	this.AvatarUrl = avatarUrl
	this.Email = email
	this.EmployeeId = employeeId
	this.FirstName = firstName
	this.LastName = lastName
	this.Password = password
	this.PhoneNumber = phoneNumber
	this.Roles = roles
	this.Username = username
	return &this
}

// NewUserRegisterWithDefaults instantiates a new UserRegister object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRegisterWithDefaults() *UserRegister {
	this := UserRegister{}
	return &this
}

// GetAvatarUrl returns the AvatarUrl field value
func (o *UserRegister) GetAvatarUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value
// and a boolean to check if the value has been set.
func (o *UserRegister) GetAvatarUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarUrl, true
}

// SetAvatarUrl sets field value
func (o *UserRegister) SetAvatarUrl(v string) {
	o.AvatarUrl = v
}

// GetEmail returns the Email field value
func (o *UserRegister) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserRegister) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserRegister) SetEmail(v string) {
	o.Email = v
}

// GetEmployeeId returns the EmployeeId field value
func (o *UserRegister) GetEmployeeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmployeeId
}

// GetEmployeeIdOk returns a tuple with the EmployeeId field value
// and a boolean to check if the value has been set.
func (o *UserRegister) GetEmployeeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmployeeId, true
}

// SetEmployeeId sets field value
func (o *UserRegister) SetEmployeeId(v string) {
	o.EmployeeId = v
}

// GetFirstName returns the FirstName field value
func (o *UserRegister) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *UserRegister) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *UserRegister) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *UserRegister) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *UserRegister) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *UserRegister) SetLastName(v string) {
	o.LastName = v
}

// GetPassword returns the Password field value
func (o *UserRegister) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *UserRegister) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *UserRegister) SetPassword(v string) {
	o.Password = v
}

// GetPhoneNumber returns the PhoneNumber field value
func (o *UserRegister) GetPhoneNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value
// and a boolean to check if the value has been set.
func (o *UserRegister) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhoneNumber, true
}

// SetPhoneNumber sets field value
func (o *UserRegister) SetPhoneNumber(v string) {
	o.PhoneNumber = v
}

// GetRoles returns the Roles field value
func (o *UserRegister) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *UserRegister) GetRolesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *UserRegister) SetRoles(v []string) {
	o.Roles = v
}

// GetUsername returns the Username field value
func (o *UserRegister) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UserRegister) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UserRegister) SetUsername(v string) {
	o.Username = v
}

func (o UserRegister) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserRegister) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["avatar_url"] = o.AvatarUrl
	toSerialize["email"] = o.Email
	toSerialize["employee_id"] = o.EmployeeId
	toSerialize["first_name"] = o.FirstName
	toSerialize["last_name"] = o.LastName
	toSerialize["password"] = o.Password
	toSerialize["phone_number"] = o.PhoneNumber
	toSerialize["roles"] = o.Roles
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *UserRegister) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"avatar_url",
		"email",
		"employee_id",
		"first_name",
		"last_name",
		"password",
		"phone_number",
		"roles",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserRegister := _UserRegister{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserRegister)

	if err != nil {
		return err
	}

	*o = UserRegister(varUserRegister)

	return err
}

type NullableUserRegister struct {
	value *UserRegister
	isSet bool
}

func (v NullableUserRegister) Get() *UserRegister {
	return v.value
}

func (v *NullableUserRegister) Set(val *UserRegister) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRegister) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRegister) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRegister(val *UserRegister) *NullableUserRegister {
	return &NullableUserRegister{value: val, isSet: true}
}

func (v NullableUserRegister) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRegister) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
