/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EntitiesGeoJSONType the model 'EntitiesGeoJSONType'
type EntitiesGeoJSONType string

// List of entities.GeoJSONType
const (
	FeatureCollection EntitiesGeoJSONType = "FeatureCollection"
	Feature           EntitiesGeoJSONType = "Feature"
	LineString        EntitiesGeoJSONType = "LineString"
)

// All allowed values of EntitiesGeoJSONType enum
var AllowedEntitiesGeoJSONTypeEnumValues = []EntitiesGeoJSONType{
	"FeatureCollection",
	"Feature",
	"LineString",
}

func (v *EntitiesGeoJSONType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitiesGeoJSONType(value)
	for _, existing := range AllowedEntitiesGeoJSONTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitiesGeoJSONType", value)
}

// NewEntitiesGeoJSONTypeFromValue returns a pointer to a valid EntitiesGeoJSONType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitiesGeoJSONTypeFromValue(v string) (*EntitiesGeoJSONType, error) {
	ev := EntitiesGeoJSONType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitiesGeoJSONType: valid values are %v", v, AllowedEntitiesGeoJSONTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitiesGeoJSONType) IsValid() bool {
	for _, existing := range AllowedEntitiesGeoJSONTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to entities.GeoJSONType value
func (v EntitiesGeoJSONType) Ptr() *EntitiesGeoJSONType {
	return &v
}

type NullableEntitiesGeoJSONType struct {
	value *EntitiesGeoJSONType
	isSet bool
}

func (v NullableEntitiesGeoJSONType) Get() *EntitiesGeoJSONType {
	return v.value
}

func (v *NullableEntitiesGeoJSONType) Set(val *EntitiesGeoJSONType) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesGeoJSONType) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesGeoJSONType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesGeoJSONType(val *EntitiesGeoJSONType) *NullableEntitiesGeoJSONType {
	return &NullableEntitiesGeoJSONType{value: val, isSet: true}
}

func (v NullableEntitiesGeoJSONType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesGeoJSONType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
