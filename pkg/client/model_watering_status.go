/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// WateringStatus the model 'WateringStatus'
type WateringStatus string

// List of WateringStatus
const (
	WateringStatusGood     WateringStatus = "good"
	WateringStatusModerate WateringStatus = "moderate"
	WateringStatusBad      WateringStatus = "bad"
	WateringStatusUnknown  WateringStatus = "unknown"
)

// All allowed values of WateringStatus enum
var AllowedWateringStatusEnumValues = []WateringStatus{
	"good",
	"moderate",
	"bad",
	"unknown",
}

func (v *WateringStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WateringStatus(value)
	for _, existing := range AllowedWateringStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WateringStatus", value)
}

// NewWateringStatusFromValue returns a pointer to a valid WateringStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWateringStatusFromValue(v string) (*WateringStatus, error) {
	ev := WateringStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WateringStatus: valid values are %v", v, AllowedWateringStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WateringStatus) IsValid() bool {
	for _, existing := range AllowedWateringStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WateringStatus value
func (v WateringStatus) Ptr() *WateringStatus {
	return &v
}

type NullableWateringStatus struct {
	value *WateringStatus
	isSet bool
}

func (v NullableWateringStatus) Get() *WateringStatus {
	return v.value
}

func (v *NullableWateringStatus) Set(val *WateringStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWateringStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWateringStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWateringStatus(val *WateringStatus) *NullableWateringStatus {
	return &NullableWateringStatus{value: val, isSet: true}
}

func (v NullableWateringStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWateringStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
