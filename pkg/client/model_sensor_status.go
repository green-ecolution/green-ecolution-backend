/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// SensorStatus the model 'SensorStatus'
type SensorStatus string

// List of SensorStatus
const (
	SensorStatusOnline  SensorStatus = "online"
	SensorStatusOffline SensorStatus = "offline"
	SensorStatusUnknown SensorStatus = "unknown"
)

// All allowed values of SensorStatus enum
var AllowedSensorStatusEnumValues = []SensorStatus{
	"online",
	"offline",
	"unknown",
}

func (v *SensorStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SensorStatus(value)
	for _, existing := range AllowedSensorStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SensorStatus", value)
}

// NewSensorStatusFromValue returns a pointer to a valid SensorStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSensorStatusFromValue(v string) (*SensorStatus, error) {
	ev := SensorStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SensorStatus: valid values are %v", v, AllowedSensorStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SensorStatus) IsValid() bool {
	for _, existing := range AllowedSensorStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SensorStatus value
func (v SensorStatus) Ptr() *SensorStatus {
	return &v
}

type NullableSensorStatus struct {
	value *SensorStatus
	isSet bool
}

func (v NullableSensorStatus) Get() *SensorStatus {
	return v.value
}

func (v *NullableSensorStatus) Set(val *SensorStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorStatus(val *SensorStatus) *NullableSensorStatus {
	return &NullableSensorStatus{value: val, isSet: true}
}

func (v NullableSensorStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
