/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	AvatarUrl       string           `json:"avatar_url"`
	CreatedAt       string           `json:"created_at"`
	DrivingLicenses []DrivingLicense `json:"driving_licenses"`
	Email           string           `json:"email"`
	EmailVerified   bool             `json:"email_verified"`
	EmployeeId      string           `json:"employee_id"`
	FirstName       string           `json:"first_name"`
	Id              string           `json:"id"`
	LastName        string           `json:"last_name"`
	PhoneNumber     string           `json:"phone_number"`
	Roles           []UserRole       `json:"roles"`
	Status          UserStatus       `json:"status"`
	Username        string           `json:"username"`
}

type _User User

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(avatarUrl string, createdAt string, drivingLicenses []DrivingLicense, email string, emailVerified bool, employeeId string, firstName string, id string, lastName string, phoneNumber string, roles []UserRole, status UserStatus, username string) *User {
	this := User{}
	this.AvatarUrl = avatarUrl
	this.CreatedAt = createdAt
	this.DrivingLicenses = drivingLicenses
	this.Email = email
	this.EmailVerified = emailVerified
	this.EmployeeId = employeeId
	this.FirstName = firstName
	this.Id = id
	this.LastName = lastName
	this.PhoneNumber = phoneNumber
	this.Roles = roles
	this.Status = status
	this.Username = username
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetAvatarUrl returns the AvatarUrl field value
func (o *User) GetAvatarUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value
// and a boolean to check if the value has been set.
func (o *User) GetAvatarUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarUrl, true
}

// SetAvatarUrl sets field value
func (o *User) SetAvatarUrl(v string) {
	o.AvatarUrl = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *User) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *User) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *User) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetDrivingLicenses returns the DrivingLicenses field value
func (o *User) GetDrivingLicenses() []DrivingLicense {
	if o == nil {
		var ret []DrivingLicense
		return ret
	}

	return o.DrivingLicenses
}

// GetDrivingLicensesOk returns a tuple with the DrivingLicenses field value
// and a boolean to check if the value has been set.
func (o *User) GetDrivingLicensesOk() ([]DrivingLicense, bool) {
	if o == nil {
		return nil, false
	}
	return o.DrivingLicenses, true
}

// SetDrivingLicenses sets field value
func (o *User) SetDrivingLicenses(v []DrivingLicense) {
	o.DrivingLicenses = v
}

// GetEmail returns the Email field value
func (o *User) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *User) SetEmail(v string) {
	o.Email = v
}

// GetEmailVerified returns the EmailVerified field value
func (o *User) GetEmailVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EmailVerified
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value
// and a boolean to check if the value has been set.
func (o *User) GetEmailVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailVerified, true
}

// SetEmailVerified sets field value
func (o *User) SetEmailVerified(v bool) {
	o.EmailVerified = v
}

// GetEmployeeId returns the EmployeeId field value
func (o *User) GetEmployeeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmployeeId
}

// GetEmployeeIdOk returns a tuple with the EmployeeId field value
// and a boolean to check if the value has been set.
func (o *User) GetEmployeeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmployeeId, true
}

// SetEmployeeId sets field value
func (o *User) SetEmployeeId(v string) {
	o.EmployeeId = v
}

// GetFirstName returns the FirstName field value
func (o *User) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *User) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *User) SetFirstName(v string) {
	o.FirstName = v
}

// GetId returns the Id field value
func (o *User) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v string) {
	o.Id = v
}

// GetLastName returns the LastName field value
func (o *User) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *User) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *User) SetLastName(v string) {
	o.LastName = v
}

// GetPhoneNumber returns the PhoneNumber field value
func (o *User) GetPhoneNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value
// and a boolean to check if the value has been set.
func (o *User) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhoneNumber, true
}

// SetPhoneNumber sets field value
func (o *User) SetPhoneNumber(v string) {
	o.PhoneNumber = v
}

// GetRoles returns the Roles field value
func (o *User) GetRoles() []UserRole {
	if o == nil {
		var ret []UserRole
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *User) GetRolesOk() ([]UserRole, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *User) SetRoles(v []UserRole) {
	o.Roles = v
}

// GetStatus returns the Status field value
func (o *User) GetStatus() UserStatus {
	if o == nil {
		var ret UserStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *User) GetStatusOk() (*UserStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *User) SetStatus(v UserStatus) {
	o.Status = v
}

// GetUsername returns the Username field value
func (o *User) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *User) SetUsername(v string) {
	o.Username = v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["avatar_url"] = o.AvatarUrl
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["driving_licenses"] = o.DrivingLicenses
	toSerialize["email"] = o.Email
	toSerialize["email_verified"] = o.EmailVerified
	toSerialize["employee_id"] = o.EmployeeId
	toSerialize["first_name"] = o.FirstName
	toSerialize["id"] = o.Id
	toSerialize["last_name"] = o.LastName
	toSerialize["phone_number"] = o.PhoneNumber
	toSerialize["roles"] = o.Roles
	toSerialize["status"] = o.Status
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *User) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"avatar_url",
		"created_at",
		"driving_licenses",
		"email",
		"email_verified",
		"employee_id",
		"first_name",
		"id",
		"last_name",
		"phone_number",
		"roles",
		"status",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUser := _User{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUser)

	if err != nil {
		return err
	}

	*o = User(varUser)

	return err
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
