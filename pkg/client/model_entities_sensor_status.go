/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EntitiesSensorStatus the model 'EntitiesSensorStatus'
type EntitiesSensorStatus string

// List of entities.SensorStatus
const (
	SensorStatusOnline  EntitiesSensorStatus = "online"
	SensorStatusOffline EntitiesSensorStatus = "offline"
	SensorStatusUnknown EntitiesSensorStatus = "unknown"
)

// All allowed values of EntitiesSensorStatus enum
var AllowedEntitiesSensorStatusEnumValues = []EntitiesSensorStatus{
	"online",
	"offline",
	"unknown",
}

func (v *EntitiesSensorStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitiesSensorStatus(value)
	for _, existing := range AllowedEntitiesSensorStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitiesSensorStatus", value)
}

// NewEntitiesSensorStatusFromValue returns a pointer to a valid EntitiesSensorStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitiesSensorStatusFromValue(v string) (*EntitiesSensorStatus, error) {
	ev := EntitiesSensorStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitiesSensorStatus: valid values are %v", v, AllowedEntitiesSensorStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitiesSensorStatus) IsValid() bool {
	for _, existing := range AllowedEntitiesSensorStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to entities.SensorStatus value
func (v EntitiesSensorStatus) Ptr() *EntitiesSensorStatus {
	return &v
}

type NullableEntitiesSensorStatus struct {
	value *EntitiesSensorStatus
	isSet bool
}

func (v NullableEntitiesSensorStatus) Get() *EntitiesSensorStatus {
	return v.value
}

func (v *NullableEntitiesSensorStatus) Set(val *EntitiesSensorStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesSensorStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesSensorStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesSensorStatus(val *EntitiesSensorStatus) *NullableEntitiesSensorStatus {
	return &NullableEntitiesSensorStatus{value: val, isSet: true}
}

func (v NullableEntitiesSensorStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesSensorStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
