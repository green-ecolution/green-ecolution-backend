/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// GeoJsonType the model 'GeoJsonType'
type GeoJsonType string

// List of GeoJsonType
const (
	FeatureCollection GeoJsonType = "FeatureCollection"
)

// All allowed values of GeoJsonType enum
var AllowedGeoJsonTypeEnumValues = []GeoJsonType{
	"FeatureCollection",
}

func (v *GeoJsonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GeoJsonType(value)
	for _, existing := range AllowedGeoJsonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GeoJsonType", value)
}

// NewGeoJsonTypeFromValue returns a pointer to a valid GeoJsonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGeoJsonTypeFromValue(v string) (*GeoJsonType, error) {
	ev := GeoJsonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GeoJsonType: valid values are %v", v, AllowedGeoJsonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GeoJsonType) IsValid() bool {
	for _, existing := range AllowedGeoJsonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GeoJsonType value
func (v GeoJsonType) Ptr() *GeoJsonType {
	return &v
}

type NullableGeoJsonType struct {
	value *GeoJsonType
	isSet bool
}

func (v NullableGeoJsonType) Get() *GeoJsonType {
	return v.value
}

func (v *NullableGeoJsonType) Set(val *GeoJsonType) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoJsonType) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoJsonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoJsonType(val *GeoJsonType) *NullableGeoJsonType {
	return &NullableGeoJsonType{value: val, isSet: true}
}

func (v NullableGeoJsonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoJsonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
