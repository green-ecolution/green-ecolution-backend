/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EvaluationValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvaluationValue{}

// EvaluationValue struct for EvaluationValue
type EvaluationValue struct {
	ConsumedWater  float32 `json:"consumed_water"`
	TreeClusterId  int32   `json:"tree_cluster_id"`
	WateringPlanId int32   `json:"watering_plan_id"`
}

type _EvaluationValue EvaluationValue

// NewEvaluationValue instantiates a new EvaluationValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvaluationValue(consumedWater float32, treeClusterId int32, wateringPlanId int32) *EvaluationValue {
	this := EvaluationValue{}
	this.ConsumedWater = consumedWater
	this.TreeClusterId = treeClusterId
	this.WateringPlanId = wateringPlanId
	return &this
}

// NewEvaluationValueWithDefaults instantiates a new EvaluationValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvaluationValueWithDefaults() *EvaluationValue {
	this := EvaluationValue{}
	return &this
}

// GetConsumedWater returns the ConsumedWater field value
func (o *EvaluationValue) GetConsumedWater() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ConsumedWater
}

// GetConsumedWaterOk returns a tuple with the ConsumedWater field value
// and a boolean to check if the value has been set.
func (o *EvaluationValue) GetConsumedWaterOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsumedWater, true
}

// SetConsumedWater sets field value
func (o *EvaluationValue) SetConsumedWater(v float32) {
	o.ConsumedWater = v
}

// GetTreeClusterId returns the TreeClusterId field value
func (o *EvaluationValue) GetTreeClusterId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TreeClusterId
}

// GetTreeClusterIdOk returns a tuple with the TreeClusterId field value
// and a boolean to check if the value has been set.
func (o *EvaluationValue) GetTreeClusterIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TreeClusterId, true
}

// SetTreeClusterId sets field value
func (o *EvaluationValue) SetTreeClusterId(v int32) {
	o.TreeClusterId = v
}

// GetWateringPlanId returns the WateringPlanId field value
func (o *EvaluationValue) GetWateringPlanId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WateringPlanId
}

// GetWateringPlanIdOk returns a tuple with the WateringPlanId field value
// and a boolean to check if the value has been set.
func (o *EvaluationValue) GetWateringPlanIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WateringPlanId, true
}

// SetWateringPlanId sets field value
func (o *EvaluationValue) SetWateringPlanId(v int32) {
	o.WateringPlanId = v
}

func (o EvaluationValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvaluationValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["consumed_water"] = o.ConsumedWater
	toSerialize["tree_cluster_id"] = o.TreeClusterId
	toSerialize["watering_plan_id"] = o.WateringPlanId
	return toSerialize, nil
}

func (o *EvaluationValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"consumed_water",
		"tree_cluster_id",
		"watering_plan_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvaluationValue := _EvaluationValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvaluationValue)

	if err != nil {
		return err
	}

	*o = EvaluationValue(varEvaluationValue)

	return err
}

type NullableEvaluationValue struct {
	value *EvaluationValue
	isSet bool
}

func (v NullableEvaluationValue) Get() *EvaluationValue {
	return v.value
}

func (v *NullableEvaluationValue) Set(val *EvaluationValue) {
	v.value = val
	v.isSet = true
}

func (v NullableEvaluationValue) IsSet() bool {
	return v.isSet
}

func (v *NullableEvaluationValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvaluationValue(val *EvaluationValue) *NullableEvaluationValue {
	return &NullableEvaluationValue{value: val, isSet: true}
}

func (v NullableEvaluationValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvaluationValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
