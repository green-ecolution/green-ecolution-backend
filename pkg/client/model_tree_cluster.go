/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TreeCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TreeCluster{}

// TreeCluster struct for TreeCluster
type TreeCluster struct {
	AdditionalInformation map[string]interface{} `json:"additional_information"`
	Address               string                 `json:"address"`
	Archived              bool                   `json:"archived"`
	CreatedAt             string                 `json:"created_at"`
	Description           string                 `json:"description"`
	Id                    int32                  `json:"id"`
	LastWatered           *string                `json:"last_watered,omitempty"`
	Latitude              float32                `json:"latitude"`
	Longitude             float32                `json:"longitude"`
	MoistureLevel         float32                `json:"moisture_level"`
	Name                  string                 `json:"name"`
	Provider              string                 `json:"provider"`
	Region                *Region                `json:"region,omitempty"`
	SoilCondition         SoilCondition          `json:"soil_condition"`
	Trees                 []Tree                 `json:"trees,omitempty"`
	UpdatedAt             string                 `json:"updated_at"`
	WateringStatus        WateringStatus         `json:"watering_status"`
}

type _TreeCluster TreeCluster

// NewTreeCluster instantiates a new TreeCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTreeCluster(additionalInformation map[string]interface{}, address string, archived bool, createdAt string, description string, id int32, latitude float32, longitude float32, moistureLevel float32, name string, provider string, soilCondition SoilCondition, updatedAt string, wateringStatus WateringStatus) *TreeCluster {
	this := TreeCluster{}
	this.AdditionalInformation = additionalInformation
	this.Address = address
	this.Archived = archived
	this.CreatedAt = createdAt
	this.Description = description
	this.Id = id
	this.Latitude = latitude
	this.Longitude = longitude
	this.MoistureLevel = moistureLevel
	this.Name = name
	this.Provider = provider
	this.SoilCondition = soilCondition
	this.UpdatedAt = updatedAt
	this.WateringStatus = wateringStatus
	return &this
}

// NewTreeClusterWithDefaults instantiates a new TreeCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTreeClusterWithDefaults() *TreeCluster {
	this := TreeCluster{}
	return &this
}

// GetAdditionalInformation returns the AdditionalInformation field value
func (o *TreeCluster) GetAdditionalInformation() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.AdditionalInformation
}

// GetAdditionalInformationOk returns a tuple with the AdditionalInformation field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetAdditionalInformationOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.AdditionalInformation, true
}

// SetAdditionalInformation sets field value
func (o *TreeCluster) SetAdditionalInformation(v map[string]interface{}) {
	o.AdditionalInformation = v
}

// GetAddress returns the Address field value
func (o *TreeCluster) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *TreeCluster) SetAddress(v string) {
	o.Address = v
}

// GetArchived returns the Archived field value
func (o *TreeCluster) GetArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archived, true
}

// SetArchived sets field value
func (o *TreeCluster) SetArchived(v bool) {
	o.Archived = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *TreeCluster) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TreeCluster) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetDescription returns the Description field value
func (o *TreeCluster) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *TreeCluster) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *TreeCluster) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TreeCluster) SetId(v int32) {
	o.Id = v
}

// GetLastWatered returns the LastWatered field value if set, zero value otherwise.
func (o *TreeCluster) GetLastWatered() string {
	if o == nil || IsNil(o.LastWatered) {
		var ret string
		return ret
	}
	return *o.LastWatered
}

// GetLastWateredOk returns a tuple with the LastWatered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetLastWateredOk() (*string, bool) {
	if o == nil || IsNil(o.LastWatered) {
		return nil, false
	}
	return o.LastWatered, true
}

// HasLastWatered returns a boolean if a field has been set.
func (o *TreeCluster) HasLastWatered() bool {
	if o != nil && !IsNil(o.LastWatered) {
		return true
	}

	return false
}

// SetLastWatered gets a reference to the given string and assigns it to the LastWatered field.
func (o *TreeCluster) SetLastWatered(v string) {
	o.LastWatered = &v
}

// GetLatitude returns the Latitude field value
func (o *TreeCluster) GetLatitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetLatitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *TreeCluster) SetLatitude(v float32) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *TreeCluster) GetLongitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetLongitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *TreeCluster) SetLongitude(v float32) {
	o.Longitude = v
}

// GetMoistureLevel returns the MoistureLevel field value
func (o *TreeCluster) GetMoistureLevel() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MoistureLevel
}

// GetMoistureLevelOk returns a tuple with the MoistureLevel field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetMoistureLevelOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MoistureLevel, true
}

// SetMoistureLevel sets field value
func (o *TreeCluster) SetMoistureLevel(v float32) {
	o.MoistureLevel = v
}

// GetName returns the Name field value
func (o *TreeCluster) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TreeCluster) SetName(v string) {
	o.Name = v
}

// GetProvider returns the Provider field value
func (o *TreeCluster) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *TreeCluster) SetProvider(v string) {
	o.Provider = v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *TreeCluster) GetRegion() Region {
	if o == nil || IsNil(o.Region) {
		var ret Region
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetRegionOk() (*Region, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *TreeCluster) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given Region and assigns it to the Region field.
func (o *TreeCluster) SetRegion(v Region) {
	o.Region = &v
}

// GetSoilCondition returns the SoilCondition field value
func (o *TreeCluster) GetSoilCondition() SoilCondition {
	if o == nil {
		var ret SoilCondition
		return ret
	}

	return o.SoilCondition
}

// GetSoilConditionOk returns a tuple with the SoilCondition field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetSoilConditionOk() (*SoilCondition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoilCondition, true
}

// SetSoilCondition sets field value
func (o *TreeCluster) SetSoilCondition(v SoilCondition) {
	o.SoilCondition = v
}

// GetTrees returns the Trees field value if set, zero value otherwise.
func (o *TreeCluster) GetTrees() []Tree {
	if o == nil || IsNil(o.Trees) {
		var ret []Tree
		return ret
	}
	return o.Trees
}

// GetTreesOk returns a tuple with the Trees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetTreesOk() ([]Tree, bool) {
	if o == nil || IsNil(o.Trees) {
		return nil, false
	}
	return o.Trees, true
}

// HasTrees returns a boolean if a field has been set.
func (o *TreeCluster) HasTrees() bool {
	if o != nil && !IsNil(o.Trees) {
		return true
	}

	return false
}

// SetTrees gets a reference to the given []Tree and assigns it to the Trees field.
func (o *TreeCluster) SetTrees(v []Tree) {
	o.Trees = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *TreeCluster) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *TreeCluster) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetWateringStatus returns the WateringStatus field value
func (o *TreeCluster) GetWateringStatus() WateringStatus {
	if o == nil {
		var ret WateringStatus
		return ret
	}

	return o.WateringStatus
}

// GetWateringStatusOk returns a tuple with the WateringStatus field value
// and a boolean to check if the value has been set.
func (o *TreeCluster) GetWateringStatusOk() (*WateringStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WateringStatus, true
}

// SetWateringStatus sets field value
func (o *TreeCluster) SetWateringStatus(v WateringStatus) {
	o.WateringStatus = v
}

func (o TreeCluster) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TreeCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["additional_information"] = o.AdditionalInformation
	toSerialize["address"] = o.Address
	toSerialize["archived"] = o.Archived
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["description"] = o.Description
	toSerialize["id"] = o.Id
	if !IsNil(o.LastWatered) {
		toSerialize["last_watered"] = o.LastWatered
	}
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	toSerialize["moisture_level"] = o.MoistureLevel
	toSerialize["name"] = o.Name
	toSerialize["provider"] = o.Provider
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	toSerialize["soil_condition"] = o.SoilCondition
	if !IsNil(o.Trees) {
		toSerialize["trees"] = o.Trees
	}
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["watering_status"] = o.WateringStatus
	return toSerialize, nil
}

func (o *TreeCluster) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"additional_information",
		"address",
		"archived",
		"created_at",
		"description",
		"id",
		"latitude",
		"longitude",
		"moisture_level",
		"name",
		"provider",
		"soil_condition",
		"updated_at",
		"watering_status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTreeCluster := _TreeCluster{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTreeCluster)

	if err != nil {
		return err
	}

	*o = TreeCluster(varTreeCluster)

	return err
}

type NullableTreeCluster struct {
	value *TreeCluster
	isSet bool
}

func (v NullableTreeCluster) Get() *TreeCluster {
	return v.value
}

func (v *NullableTreeCluster) Set(val *TreeCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableTreeCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableTreeCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTreeCluster(val *TreeCluster) *NullableTreeCluster {
	return &NullableTreeCluster{value: val, isSet: true}
}

func (v NullableTreeCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTreeCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
