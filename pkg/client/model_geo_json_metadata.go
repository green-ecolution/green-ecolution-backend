/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GeoJSONMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeoJSONMetadata{}

// GeoJSONMetadata struct for GeoJSONMetadata
type GeoJSONMetadata struct {
	EndPoint      GeoJSONLocation `json:"end_point"`
	StartPoint    GeoJSONLocation `json:"start_point"`
	WateringPoint GeoJSONLocation `json:"watering_point"`
}

type _GeoJSONMetadata GeoJSONMetadata

// NewGeoJSONMetadata instantiates a new GeoJSONMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoJSONMetadata(endPoint GeoJSONLocation, startPoint GeoJSONLocation, wateringPoint GeoJSONLocation) *GeoJSONMetadata {
	this := GeoJSONMetadata{}
	this.EndPoint = endPoint
	this.StartPoint = startPoint
	this.WateringPoint = wateringPoint
	return &this
}

// NewGeoJSONMetadataWithDefaults instantiates a new GeoJSONMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoJSONMetadataWithDefaults() *GeoJSONMetadata {
	this := GeoJSONMetadata{}
	return &this
}

// GetEndPoint returns the EndPoint field value
func (o *GeoJSONMetadata) GetEndPoint() GeoJSONLocation {
	if o == nil {
		var ret GeoJSONLocation
		return ret
	}

	return o.EndPoint
}

// GetEndPointOk returns a tuple with the EndPoint field value
// and a boolean to check if the value has been set.
func (o *GeoJSONMetadata) GetEndPointOk() (*GeoJSONLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndPoint, true
}

// SetEndPoint sets field value
func (o *GeoJSONMetadata) SetEndPoint(v GeoJSONLocation) {
	o.EndPoint = v
}

// GetStartPoint returns the StartPoint field value
func (o *GeoJSONMetadata) GetStartPoint() GeoJSONLocation {
	if o == nil {
		var ret GeoJSONLocation
		return ret
	}

	return o.StartPoint
}

// GetStartPointOk returns a tuple with the StartPoint field value
// and a boolean to check if the value has been set.
func (o *GeoJSONMetadata) GetStartPointOk() (*GeoJSONLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartPoint, true
}

// SetStartPoint sets field value
func (o *GeoJSONMetadata) SetStartPoint(v GeoJSONLocation) {
	o.StartPoint = v
}

// GetWateringPoint returns the WateringPoint field value
func (o *GeoJSONMetadata) GetWateringPoint() GeoJSONLocation {
	if o == nil {
		var ret GeoJSONLocation
		return ret
	}

	return o.WateringPoint
}

// GetWateringPointOk returns a tuple with the WateringPoint field value
// and a boolean to check if the value has been set.
func (o *GeoJSONMetadata) GetWateringPointOk() (*GeoJSONLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WateringPoint, true
}

// SetWateringPoint sets field value
func (o *GeoJSONMetadata) SetWateringPoint(v GeoJSONLocation) {
	o.WateringPoint = v
}

func (o GeoJSONMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeoJSONMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["end_point"] = o.EndPoint
	toSerialize["start_point"] = o.StartPoint
	toSerialize["watering_point"] = o.WateringPoint
	return toSerialize, nil
}

func (o *GeoJSONMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"end_point",
		"start_point",
		"watering_point",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGeoJSONMetadata := _GeoJSONMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGeoJSONMetadata)

	if err != nil {
		return err
	}

	*o = GeoJSONMetadata(varGeoJSONMetadata)

	return err
}

type NullableGeoJSONMetadata struct {
	value *GeoJSONMetadata
	isSet bool
}

func (v NullableGeoJSONMetadata) Get() *GeoJSONMetadata {
	return v.value
}

func (v *NullableGeoJSONMetadata) Set(val *GeoJSONMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoJSONMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoJSONMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoJSONMetadata(val *GeoJSONMetadata) *NullableGeoJSONMetadata {
	return &NullableGeoJSONMetadata{value: val, isSet: true}
}

func (v NullableGeoJSONMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoJSONMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
