/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the HTTPError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HTTPError{}

// HTTPError struct for HTTPError
type HTTPError struct {
	Code   int32  `json:"code"`
	Error  string `json:"error"`
	Method string `json:"method"`
	Path   string `json:"path"`
}

type _HTTPError HTTPError

// NewHTTPError instantiates a new HTTPError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHTTPError(code int32, error_ string, method string, path string) *HTTPError {
	this := HTTPError{}
	this.Code = code
	this.Error = error_
	this.Method = method
	this.Path = path
	return &this
}

// NewHTTPErrorWithDefaults instantiates a new HTTPError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHTTPErrorWithDefaults() *HTTPError {
	this := HTTPError{}
	return &this
}

// GetCode returns the Code field value
func (o *HTTPError) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *HTTPError) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *HTTPError) SetCode(v int32) {
	o.Code = v
}

// GetError returns the Error field value
func (o *HTTPError) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *HTTPError) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *HTTPError) SetError(v string) {
	o.Error = v
}

// GetMethod returns the Method field value
func (o *HTTPError) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *HTTPError) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *HTTPError) SetMethod(v string) {
	o.Method = v
}

// GetPath returns the Path field value
func (o *HTTPError) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *HTTPError) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *HTTPError) SetPath(v string) {
	o.Path = v
}

func (o HTTPError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HTTPError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["error"] = o.Error
	toSerialize["method"] = o.Method
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *HTTPError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"error",
		"method",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHTTPError := _HTTPError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHTTPError)

	if err != nil {
		return err
	}

	*o = HTTPError(varHTTPError)

	return err
}

type NullableHTTPError struct {
	value *HTTPError
	isSet bool
}

func (v NullableHTTPError) Get() *HTTPError {
	return v.value
}

func (v *NullableHTTPError) Set(val *HTTPError) {
	v.value = val
	v.isSet = true
}

func (v NullableHTTPError) IsSet() bool {
	return v.isSet
}

func (v *NullableHTTPError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHTTPError(val *HTTPError) *NullableHTTPError {
	return &NullableHTTPError{value: val, isSet: true}
}

func (v NullableHTTPError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHTTPError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
