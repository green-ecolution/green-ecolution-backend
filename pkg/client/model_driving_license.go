/*
Green Space Management API

This is the API for the Green Ecolution Management System.

API version: develop
Contact: info@green-ecolution.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// DrivingLicense the model 'DrivingLicense'
type DrivingLicense string

// List of DrivingLicense
const (
	DrivingLicenseB       DrivingLicense = "B"
	DrivingLicenseBE      DrivingLicense = "BE"
	DrivingLicenseC       DrivingLicense = "C"
	DrivingLicenseCE      DrivingLicense = "CE"
	DrivingLicenseUnknown DrivingLicense = "Unknown"
)

// All allowed values of DrivingLicense enum
var AllowedDrivingLicenseEnumValues = []DrivingLicense{
	"B",
	"BE",
	"C",
	"CE",
	"Unknown",
}

func (v *DrivingLicense) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DrivingLicense(value)
	for _, existing := range AllowedDrivingLicenseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DrivingLicense", value)
}

// NewDrivingLicenseFromValue returns a pointer to a valid DrivingLicense
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDrivingLicenseFromValue(v string) (*DrivingLicense, error) {
	ev := DrivingLicense(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DrivingLicense: valid values are %v", v, AllowedDrivingLicenseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DrivingLicense) IsValid() bool {
	for _, existing := range AllowedDrivingLicenseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DrivingLicense value
func (v DrivingLicense) Ptr() *DrivingLicense {
	return &v
}

type NullableDrivingLicense struct {
	value *DrivingLicense
	isSet bool
}

func (v NullableDrivingLicense) Get() *DrivingLicense {
	return v.value
}

func (v *NullableDrivingLicense) Set(val *DrivingLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableDrivingLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableDrivingLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDrivingLicense(val *DrivingLicense) *NullableDrivingLicense {
	return &NullableDrivingLicense{value: val, isSet: true}
}

func (v NullableDrivingLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDrivingLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
